
MultiSync_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006574  08006574  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800657c  0800657c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800657c  0800657c  0001657c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006580  08006580  00016580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00012fac  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013010  20013010  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   000123b0  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b1b  00000000  00000000  00032487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010f8  00000000  00000000  00034fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d39  00000000  00000000  000360a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022974  00000000  00000000  00036dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013cb9  00000000  00000000  0005974d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4b0a  00000000  00000000  0006d406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004bec  00000000  00000000  00141f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00146afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800645c 	.word	0x0800645c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	0800645c 	.word	0x0800645c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */


	/* 5 eleman kapasiteli, her eleman 1 byte (uint8_t) */
	 queue = xQueueCreate(5, sizeof(uint8_t));
 8000582:	2200      	movs	r2, #0
 8000584:	2101      	movs	r1, #1
 8000586:	2005      	movs	r0, #5
 8000588:	f002 fbd2 	bl	8002d30 <xQueueGenericCreate>
 800058c:	4603      	mov	r3, r0
 800058e:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <main+0x78>)
 8000590:	6013      	str	r3, [r2, #0]



	 /* Maksimum 10 basışa kadar tutabilir; ilk değer = 0 (henüz semafor verilmedi) */
	 xCountingSem = xSemaphoreCreateCounting(10, 0);
 8000592:	2100      	movs	r1, #0
 8000594:	200a      	movs	r0, #10
 8000596:	f002 fc3c 	bl	8002e12 <xQueueCreateCountingSemaphore>
 800059a:	4603      	mov	r3, r0
 800059c:	4a16      	ldr	r2, [pc, #88]	; (80005f8 <main+0x7c>)
 800059e:	6013      	str	r3, [r2, #0]


	   xTaskCreate(vQueueTask,   "QueueTask",   128, NULL, 1, NULL);
 80005a0:	2300      	movs	r3, #0
 80005a2:	9301      	str	r3, [sp, #4]
 80005a4:	2301      	movs	r3, #1
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2300      	movs	r3, #0
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	4913      	ldr	r1, [pc, #76]	; (80005fc <main+0x80>)
 80005ae:	4814      	ldr	r0, [pc, #80]	; (8000600 <main+0x84>)
 80005b0:	f003 f924 	bl	80037fc <xTaskCreate>
	   xTaskCreate(vCountSemTask,"CountSemTask",128, NULL, 1, NULL);
 80005b4:	2300      	movs	r3, #0
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2301      	movs	r3, #1
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	4910      	ldr	r1, [pc, #64]	; (8000604 <main+0x88>)
 80005c2:	4811      	ldr	r0, [pc, #68]	; (8000608 <main+0x8c>)
 80005c4:	f003 f91a 	bl	80037fc <xTaskCreate>
	   xTaskCreate(vNotifyTask,  "NotifyTask",  128, NULL, 1, &xNotifyTaskHandle);
 80005c8:	4b10      	ldr	r3, [pc, #64]	; (800060c <main+0x90>)
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2301      	movs	r3, #1
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	490e      	ldr	r1, [pc, #56]	; (8000610 <main+0x94>)
 80005d6:	480f      	ldr	r0, [pc, #60]	; (8000614 <main+0x98>)
 80005d8:	f003 f910 	bl	80037fc <xTaskCreate>


	   vTaskStartScheduler();
 80005dc:	f003 fa78 	bl	8003ad0 <vTaskStartScheduler>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fc4e 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f818 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8aa 	bl	8000740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f87e 	bl	80006ec <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x74>
 80005f2:	bf00      	nop
 80005f4:	200000c4 	.word	0x200000c4
 80005f8:	200000c8 	.word	0x200000c8
 80005fc:	08006474 	.word	0x08006474
 8000600:	08000a41 	.word	0x08000a41
 8000604:	08006480 	.word	0x08006480
 8000608:	08000aa5 	.word	0x08000aa5
 800060c:	200000cc 	.word	0x200000cc
 8000610:	08006490 	.word	0x08006490
 8000614:	08000af9 	.word	0x08000af9

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f005 fa94 	bl	8005b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800068c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000690:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000696:	2307      	movs	r3, #7
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 feec 	bl	800147c <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006aa:	f000 fa5b 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2105      	movs	r1, #5
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f94d 	bl	800196c <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d8:	f000 fa44 	bl	8000b64 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3750      	adds	r7, #80	; 0x50
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_USART2_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000724:	f001 fe22 	bl	800236c <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800072e:	f000 fa19 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000080 	.word	0x20000080
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	4b96      	ldr	r3, [pc, #600]	; (80009b4 <MX_GPIO_Init+0x274>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a95      	ldr	r2, [pc, #596]	; (80009b4 <MX_GPIO_Init+0x274>)
 8000760:	f043 0310 	orr.w	r3, r3, #16
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b93      	ldr	r3, [pc, #588]	; (80009b4 <MX_GPIO_Init+0x274>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0310 	and.w	r3, r3, #16
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	4b8f      	ldr	r3, [pc, #572]	; (80009b4 <MX_GPIO_Init+0x274>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a8e      	ldr	r2, [pc, #568]	; (80009b4 <MX_GPIO_Init+0x274>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b8c      	ldr	r3, [pc, #560]	; (80009b4 <MX_GPIO_Init+0x274>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b88      	ldr	r3, [pc, #544]	; (80009b4 <MX_GPIO_Init+0x274>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a87      	ldr	r2, [pc, #540]	; (80009b4 <MX_GPIO_Init+0x274>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b85      	ldr	r3, [pc, #532]	; (80009b4 <MX_GPIO_Init+0x274>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b81      	ldr	r3, [pc, #516]	; (80009b4 <MX_GPIO_Init+0x274>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a80      	ldr	r2, [pc, #512]	; (80009b4 <MX_GPIO_Init+0x274>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b7e      	ldr	r3, [pc, #504]	; (80009b4 <MX_GPIO_Init+0x274>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b7a      	ldr	r3, [pc, #488]	; (80009b4 <MX_GPIO_Init+0x274>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a79      	ldr	r2, [pc, #484]	; (80009b4 <MX_GPIO_Init+0x274>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b77      	ldr	r3, [pc, #476]	; (80009b4 <MX_GPIO_Init+0x274>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b73      	ldr	r3, [pc, #460]	; (80009b4 <MX_GPIO_Init+0x274>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a72      	ldr	r2, [pc, #456]	; (80009b4 <MX_GPIO_Init+0x274>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b70      	ldr	r3, [pc, #448]	; (80009b4 <MX_GPIO_Init+0x274>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2108      	movs	r1, #8
 8000802:	486d      	ldr	r0, [pc, #436]	; (80009b8 <MX_GPIO_Init+0x278>)
 8000804:	f000 fdfc 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	2101      	movs	r1, #1
 800080c:	486b      	ldr	r0, [pc, #428]	; (80009bc <MX_GPIO_Init+0x27c>)
 800080e:	f000 fdf7 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000812:	2200      	movs	r2, #0
 8000814:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000818:	4869      	ldr	r0, [pc, #420]	; (80009c0 <MX_GPIO_Init+0x280>)
 800081a:	f000 fdf1 	bl	8001400 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800081e:	2308      	movs	r3, #8
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4860      	ldr	r0, [pc, #384]	; (80009b8 <MX_GPIO_Init+0x278>)
 8000836:	f000 fc47 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	485a      	ldr	r0, [pc, #360]	; (80009bc <MX_GPIO_Init+0x27c>)
 8000852:	f000 fc39 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000856:	2308      	movs	r3, #8
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000866:	2305      	movs	r3, #5
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4852      	ldr	r0, [pc, #328]	; (80009bc <MX_GPIO_Init+0x27c>)
 8000872:	f000 fc29 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000876:	2301      	movs	r3, #1
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	484e      	ldr	r0, [pc, #312]	; (80009c4 <MX_GPIO_Init+0x284>)
 800088c:	f000 fc1c 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000890:	2304      	movs	r3, #4
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4849      	ldr	r0, [pc, #292]	; (80009c8 <MX_GPIO_Init+0x288>)
 80008a4:	f000 fc10 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4840      	ldr	r0, [pc, #256]	; (80009c8 <MX_GPIO_Init+0x288>)
 80008c6:	f000 fbff 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ca:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4837      	ldr	r0, [pc, #220]	; (80009c0 <MX_GPIO_Init+0x280>)
 80008e4:	f000 fbf0 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008e8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fa:	2306      	movs	r3, #6
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	482d      	ldr	r0, [pc, #180]	; (80009bc <MX_GPIO_Init+0x27c>)
 8000906:	f000 fbdf 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800090a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4829      	ldr	r0, [pc, #164]	; (80009c4 <MX_GPIO_Init+0x284>)
 8000920:	f000 fbd2 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000924:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000936:	230a      	movs	r3, #10
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4820      	ldr	r0, [pc, #128]	; (80009c4 <MX_GPIO_Init+0x284>)
 8000942:	f000 fbc1 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000946:	2320      	movs	r3, #32
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4819      	ldr	r0, [pc, #100]	; (80009c0 <MX_GPIO_Init+0x280>)
 800095a:	f000 fbb5 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800095e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000964:	2312      	movs	r3, #18
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000968:	2301      	movs	r3, #1
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000970:	2304      	movs	r3, #4
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4813      	ldr	r0, [pc, #76]	; (80009c8 <MX_GPIO_Init+0x288>)
 800097c:	f000 fba4 	bl	80010c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000980:	2302      	movs	r3, #2
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000984:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <MX_GPIO_Init+0x278>)
 8000996:	f000 fb97 	bl	80010c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2106      	movs	r1, #6
 800099e:	2006      	movs	r0, #6
 80009a0:	f000 fb68 	bl	8001074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009a4:	2006      	movs	r0, #6
 80009a6:	f000 fb81 	bl	80010ac <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	; 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020c00 	.word	0x40020c00
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020400 	.word	0x40020400

080009cc <button_interrupt_handler>:

/* USER CODE BEGIN 4 */
void button_interrupt_handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  static uint8_t pressCount = 0;
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]

  /* Her buton kesmesinde sayacı arttır */
  pressCount++;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <button_interrupt_handler+0x60>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <button_interrupt_handler+0x60>)
 80009e0:	701a      	strb	r2, [r3, #0]

  /* 1) Counting Semaforunu ver */
  xSemaphoreGiveFromISR(xCountingSem, &xHigherPriorityTaskWoken);
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <button_interrupt_handler+0x64>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1d3a      	adds	r2, r7, #4
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 faf1 	bl	8002fd2 <xQueueGiveFromISR>

  /* 2) Queue'ya basış sayısını gönder */
  xQueueSendFromISR(queue, &pressCount, &xHigherPriorityTaskWoken);
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <button_interrupt_handler+0x68>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	1d3a      	adds	r2, r7, #4
 80009f6:	2300      	movs	r3, #0
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <button_interrupt_handler+0x60>)
 80009fa:	f002 fa38 	bl	8002e6e <xQueueGenericSendFromISR>

  /* 3) Bir göreve bildirim (notification) gönder */
  vTaskNotifyGiveFromISR(xNotifyTaskHandle, &xHigherPriorityTaskWoken);
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <button_interrupt_handler+0x6c>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	1d3a      	adds	r2, r7, #4
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f004 f85a 	bl	8004ac0 <vTaskGenericNotifyGiveFromISR>

  /* Eğer ISR'dan çıktıktan sonra daha yüksek öncelikli bir göreve geçmemiz gerekiyorsa, bunu sağlayın */
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d007      	beq.n	8000a22 <button_interrupt_handler+0x56>
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <button_interrupt_handler+0x70>)
 8000a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	f3bf 8f4f 	dsb	sy
 8000a1e:	f3bf 8f6f 	isb	sy
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000d0 	.word	0x200000d0
 8000a30:	200000c8 	.word	0x200000c8
 8000a34:	200000c4 	.word	0x200000c4
 8000a38:	200000cc 	.word	0x200000cc
 8000a3c:	e000ed04 	.word	0xe000ed04

08000a40 <vQueueTask>:



void vQueueTask(void *pvParameters)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b090      	sub	sp, #64	; 0x40
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint8_t receivedValue = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  char msg[50];

  for(;;)
  {
    /* Queue'dan değer gelmesini bekle */
    if(xQueueReceive(queue, &receivedValue, portMAX_DELAY) == pdTRUE)
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <vQueueTask+0x58>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000a56:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fb5e 	bl	800311c <xQueueReceive>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d1f3      	bne.n	8000a4e <vQueueTask+0xe>
    {
      /* Değer geldiğinde UART'a bas */
      sprintf(msg, "vQueueTask: Button press count = %d\r\n", receivedValue);
 8000a66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	490a      	ldr	r1, [pc, #40]	; (8000a9c <vQueueTask+0x5c>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	f005 f84e 	bl	8005b14 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fba7 	bl	80001d0 <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	f107 010c 	add.w	r1, r7, #12
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <vQueueTask+0x60>)
 8000a90:	f001 fcb9 	bl	8002406 <HAL_UART_Transmit>
    if(xQueueReceive(queue, &receivedValue, portMAX_DELAY) == pdTRUE)
 8000a94:	e7db      	b.n	8000a4e <vQueueTask+0xe>
 8000a96:	bf00      	nop
 8000a98:	200000c4 	.word	0x200000c4
 8000a9c:	0800649c 	.word	0x0800649c
 8000aa0:	20000080 	.word	0x20000080

08000aa4 <vCountSemTask>:




void vCountSemTask(void *pvParameters)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b090      	sub	sp, #64	; 0x40
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  char msg[50];

  for(;;)
  {
    /* Semafor verildi mi, bekle */
    if(xSemaphoreTake(xCountingSem, portMAX_DELAY) == pdTRUE)
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <vCountSemTask+0x48>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 fc11 	bl	80032dc <xQueueSemaphoreTake>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d1f5      	bne.n	8000aac <vCountSemTask+0x8>
    {
      /* Semafor alındığında UART'a bas */
      sprintf(msg, "vCountSemTask: Semaphore received\r\n");
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	490a      	ldr	r1, [pc, #40]	; (8000af0 <vCountSemTask+0x4c>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f005 f824 	bl	8005b14 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fb7d 	bl	80001d0 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	f107 010c 	add.w	r1, r7, #12
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	4804      	ldr	r0, [pc, #16]	; (8000af4 <vCountSemTask+0x50>)
 8000ae4:	f001 fc8f 	bl	8002406 <HAL_UART_Transmit>
    if(xSemaphoreTake(xCountingSem, portMAX_DELAY) == pdTRUE)
 8000ae8:	e7e0      	b.n	8000aac <vCountSemTask+0x8>
 8000aea:	bf00      	nop
 8000aec:	200000c8 	.word	0x200000c8
 8000af0:	080064c4 	.word	0x080064c4
 8000af4:	20000080 	.word	0x20000080

08000af8 <vNotifyTask>:




void vNotifyTask(void *pvParameters)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b090      	sub	sp, #64	; 0x40
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  char msg[50];

  for(;;)
  {
    /* Buton ISR'ından gelebilecek bildirimi bekle */
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	2101      	movs	r1, #1
 8000b06:	2000      	movs	r0, #0
 8000b08:	f003 ff72 	bl	80049f0 <ulTaskGenericNotifyTake>

    /* Bildirim geldiğinde UART'a bas */
    sprintf(msg, "vNotifyTask: Notification received\r\n");
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4909      	ldr	r1, [pc, #36]	; (8000b38 <vNotifyTask+0x40>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 fffe 	bl	8005b14 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fb57 	bl	80001d0 <strlen>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	f107 010c 	add.w	r1, r7, #12
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	4803      	ldr	r0, [pc, #12]	; (8000b3c <vNotifyTask+0x44>)
 8000b30:	f001 fc69 	bl	8002406 <HAL_UART_Transmit>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000b34:	e7e4      	b.n	8000b00 <vNotifyTask+0x8>
 8000b36:	bf00      	nop
 8000b38:	080064e8 	.word	0x080064e8
 8000b3c:	20000080 	.word	0x20000080

08000b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d101      	bne.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b52:	f000 f9b7 	bl	8000ec4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40001000 	.word	0x40001000

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	4a0f      	ldr	r2, [pc, #60]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b84:	6453      	str	r3, [r2, #68]	; 0x44
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <HAL_UART_MspInit+0x84>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d12b      	bne.n	8000c3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c1a:	230c      	movs	r3, #12
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_UART_MspInit+0x8c>)
 8000c36:	f000 fa47 	bl	80010c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40004400 	.word	0x40004400
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000

08000c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4b33      	ldr	r3, [pc, #204]	; (8000d34 <HAL_InitTick+0xe4>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	4a32      	ldr	r2, [pc, #200]	; (8000d34 <HAL_InitTick+0xe4>)
 8000c6a:	f043 0310 	orr.w	r3, r3, #16
 8000c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c70:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <HAL_InitTick+0xe4>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 0310 	and.w	r3, r3, #16
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c7c:	f107 0210 	add.w	r2, r7, #16
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4611      	mov	r1, r2
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 f890 	bl	8001dac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d103      	bne.n	8000c9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c96:	f001 f861 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 8000c9a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c9c:	e004      	b.n	8000ca8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c9e:	f001 f85d 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	4a23      	ldr	r2, [pc, #140]	; (8000d38 <HAL_InitTick+0xe8>)
 8000cac:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb0:	0c9b      	lsrs	r3, r3, #18
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <HAL_InitTick+0xec>)
 8000cb8:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <HAL_InitTick+0xf0>)
 8000cba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <HAL_InitTick+0xec>)
 8000cbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <HAL_InitTick+0xec>)
 8000cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_InitTick+0xec>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_InitTick+0xec>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_InitTick+0xec>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cdc:	4817      	ldr	r0, [pc, #92]	; (8000d3c <HAL_InitTick+0xec>)
 8000cde:	f001 f897 	bl	8001e10 <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ce8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d11b      	bne.n	8000d28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cf0:	4812      	ldr	r0, [pc, #72]	; (8000d3c <HAL_InitTick+0xec>)
 8000cf2:	f001 f8e7 	bl	8001ec4 <HAL_TIM_Base_Start_IT>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d111      	bne.n	8000d28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d04:	2036      	movs	r0, #54	; 0x36
 8000d06:	f000 f9d1 	bl	80010ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d808      	bhi.n	8000d22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	2036      	movs	r0, #54	; 0x36
 8000d16:	f000 f9ad 	bl	8001074 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_InitTick+0xf4>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e002      	b.n	8000d28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3738      	adds	r7, #56	; 0x38
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	431bde83 	.word	0x431bde83
 8000d3c:	200000d4 	.word	0x200000d4
 8000d40:	40001000 	.word	0x40001000
 8000d44:	20000004 	.word	0x20000004

08000d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <NMI_Handler+0x4>

08000d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <BusFault_Handler+0x4>

08000d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <UsageFault_Handler+0x4>

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	button_interrupt_handler();
 8000d78:	f7ff fe28 	bl	80009cc <button_interrupt_handler>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f000 fb59 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <TIM6_DAC_IRQHandler+0x10>)
 8000d8e:	f001 f909 	bl	8001fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000d4 	.word	0x200000d4

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f004 feca 	bl	8005b64 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20020000 	.word	0x20020000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	2000011c 	.word	0x2000011c
 8000e04:	20013010 	.word	0x20013010

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e32:	490e      	ldr	r1, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e48:	4c0b      	ldr	r4, [pc, #44]	; (8000e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ffd7 	bl	8000e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f004 fe89 	bl	8005b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fb8d 	bl	800057c <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e70:	08006584 	.word	0x08006584
  ldr r2, =_sbss
 8000e74:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e78:	20013010 	.word	0x20013010

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f8d8 	bl	800105e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fece 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fe5c 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000120 	.word	0x20000120

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000120 	.word	0x20000120

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ff4c 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001086:	f7ff ff61 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 800108a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	6978      	ldr	r0, [r7, #20]
 8001092:	f7ff ffb1 	bl	8000ff8 <NVIC_EncodePriority>
 8001096:	4602      	mov	r2, r0
 8001098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff80 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010a4:	bf00      	nop
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff54 	bl	8000f68 <__NVIC_EnableIRQ>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	e16b      	b.n	80013bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e4:	2201      	movs	r2, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f040 815a 	bne.w	80013b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b01      	cmp	r3, #1
 800110c:	d005      	beq.n	800111a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001116:	2b02      	cmp	r3, #2
 8001118:	d130      	bne.n	800117c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 0201 	and.w	r2, r3, #1
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b03      	cmp	r3, #3
 8001186:	d017      	beq.n	80011b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 0303 	and.w	r3, r3, #3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d123      	bne.n	800120c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	f003 0307 	and.w	r3, r3, #7
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	08da      	lsrs	r2, r3, #3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3208      	adds	r2, #8
 8001206:	69b9      	ldr	r1, [r7, #24]
 8001208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0203 	and.w	r2, r3, #3
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80b4 	beq.w	80013b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b60      	ldr	r3, [pc, #384]	; (80013d4 <HAL_GPIO_Init+0x30c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a5f      	ldr	r2, [pc, #380]	; (80013d4 <HAL_GPIO_Init+0x30c>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b5d      	ldr	r3, [pc, #372]	; (80013d4 <HAL_GPIO_Init+0x30c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126a:	4a5b      	ldr	r2, [pc, #364]	; (80013d8 <HAL_GPIO_Init+0x310>)
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	089b      	lsrs	r3, r3, #2
 8001270:	3302      	adds	r3, #2
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a52      	ldr	r2, [pc, #328]	; (80013dc <HAL_GPIO_Init+0x314>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d02b      	beq.n	80012ee <HAL_GPIO_Init+0x226>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a51      	ldr	r2, [pc, #324]	; (80013e0 <HAL_GPIO_Init+0x318>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d025      	beq.n	80012ea <HAL_GPIO_Init+0x222>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a50      	ldr	r2, [pc, #320]	; (80013e4 <HAL_GPIO_Init+0x31c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01f      	beq.n	80012e6 <HAL_GPIO_Init+0x21e>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a4f      	ldr	r2, [pc, #316]	; (80013e8 <HAL_GPIO_Init+0x320>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d019      	beq.n	80012e2 <HAL_GPIO_Init+0x21a>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4e      	ldr	r2, [pc, #312]	; (80013ec <HAL_GPIO_Init+0x324>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d013      	beq.n	80012de <HAL_GPIO_Init+0x216>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4d      	ldr	r2, [pc, #308]	; (80013f0 <HAL_GPIO_Init+0x328>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d00d      	beq.n	80012da <HAL_GPIO_Init+0x212>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4c      	ldr	r2, [pc, #304]	; (80013f4 <HAL_GPIO_Init+0x32c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d007      	beq.n	80012d6 <HAL_GPIO_Init+0x20e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4b      	ldr	r2, [pc, #300]	; (80013f8 <HAL_GPIO_Init+0x330>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d101      	bne.n	80012d2 <HAL_GPIO_Init+0x20a>
 80012ce:	2307      	movs	r3, #7
 80012d0:	e00e      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012d2:	2308      	movs	r3, #8
 80012d4:	e00c      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012d6:	2306      	movs	r3, #6
 80012d8:	e00a      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012da:	2305      	movs	r3, #5
 80012dc:	e008      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012de:	2304      	movs	r3, #4
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012e2:	2303      	movs	r3, #3
 80012e4:	e004      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x228>
 80012ee:	2300      	movs	r3, #0
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	f002 0203 	and.w	r2, r2, #3
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	4093      	lsls	r3, r2
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001300:	4935      	ldr	r1, [pc, #212]	; (80013d8 <HAL_GPIO_Init+0x310>)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130e:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <HAL_GPIO_Init+0x334>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001332:	4a32      	ldr	r2, [pc, #200]	; (80013fc <HAL_GPIO_Init+0x334>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001338:	4b30      	ldr	r3, [pc, #192]	; (80013fc <HAL_GPIO_Init+0x334>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800135c:	4a27      	ldr	r2, [pc, #156]	; (80013fc <HAL_GPIO_Init+0x334>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001362:	4b26      	ldr	r3, [pc, #152]	; (80013fc <HAL_GPIO_Init+0x334>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001386:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <HAL_GPIO_Init+0x334>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_GPIO_Init+0x334>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b0:	4a12      	ldr	r2, [pc, #72]	; (80013fc <HAL_GPIO_Init+0x334>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	f67f ae90 	bls.w	80010e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40013800 	.word	0x40013800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020c00 	.word	0x40020c00
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40021400 	.word	0x40021400
 80013f4:	40021800 	.word	0x40021800
 80013f8:	40021c00 	.word	0x40021c00
 80013fc:	40013c00 	.word	0x40013c00

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800141c:	e003      	b.n	8001426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f806 	bl	8001464 <HAL_GPIO_EXTI_Callback>
  }
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e267      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d075      	beq.n	8001586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800149a:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d00c      	beq.n	80014c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4b85      	ldr	r3, [pc, #532]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d112      	bne.n	80014d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b2:	4b82      	ldr	r3, [pc, #520]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014be:	d10b      	bne.n	80014d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	4b7e      	ldr	r3, [pc, #504]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d05b      	beq.n	8001584 <HAL_RCC_OscConfig+0x108>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d157      	bne.n	8001584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e242      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d106      	bne.n	80014f0 <HAL_RCC_OscConfig+0x74>
 80014e2:	4b76      	ldr	r3, [pc, #472]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a75      	ldr	r2, [pc, #468]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e01d      	b.n	800152c <HAL_RCC_OscConfig+0xb0>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x98>
 80014fa:	4b70      	ldr	r3, [pc, #448]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a6f      	ldr	r2, [pc, #444]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 8001500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b6d      	ldr	r3, [pc, #436]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a6c      	ldr	r2, [pc, #432]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e00b      	b.n	800152c <HAL_RCC_OscConfig+0xb0>
 8001514:	4b69      	ldr	r3, [pc, #420]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a68      	ldr	r2, [pc, #416]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 800151a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b66      	ldr	r3, [pc, #408]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a65      	ldr	r2, [pc, #404]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 8001526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d013      	beq.n	800155c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fcda 	bl	8000eec <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fcd6 	bl	8000eec <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e207      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0xc0>
 800155a:	e014      	b.n	8001586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fcc6 	bl	8000eec <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fcc2 	bl	8000eec <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e1f3      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001576:	4b51      	ldr	r3, [pc, #324]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0xe8>
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d063      	beq.n	800165a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001592:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00b      	beq.n	80015b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b47      	ldr	r3, [pc, #284]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d11c      	bne.n	80015e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015aa:	4b44      	ldr	r3, [pc, #272]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d116      	bne.n	80015e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	4b41      	ldr	r3, [pc, #260]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_RCC_OscConfig+0x152>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e1c7      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ce:	4b3b      	ldr	r3, [pc, #236]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	4937      	ldr	r1, [pc, #220]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e2:	e03a      	b.n	800165a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ec:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <HAL_RCC_OscConfig+0x244>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff fc7b 	bl	8000eec <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fa:	f7ff fc77 	bl	8000eec <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e1a8      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160c:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4925      	ldr	r1, [pc, #148]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 8001628:	4313      	orrs	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
 800162c:	e015      	b.n	800165a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_RCC_OscConfig+0x244>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fc5a 	bl	8000eec <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163c:	f7ff fc56 	bl	8000eec <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e187      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d036      	beq.n	80016d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d016      	beq.n	800169c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_RCC_OscConfig+0x248>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff fc3a 	bl	8000eec <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fc36 	bl	8000eec <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e167      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_RCC_OscConfig+0x240>)
 8001690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x200>
 800169a:	e01b      	b.n	80016d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_RCC_OscConfig+0x248>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a2:	f7ff fc23 	bl	8000eec <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a8:	e00e      	b.n	80016c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016aa:	f7ff fc1f 	bl	8000eec <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d907      	bls.n	80016c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e150      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
 80016bc:	40023800 	.word	0x40023800
 80016c0:	42470000 	.word	0x42470000
 80016c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c8:	4b88      	ldr	r3, [pc, #544]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 80016ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ea      	bne.n	80016aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 8097 	beq.w	8001810 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e6:	4b81      	ldr	r3, [pc, #516]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10f      	bne.n	8001712 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b7d      	ldr	r3, [pc, #500]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a7c      	ldr	r2, [pc, #496]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b7a      	ldr	r3, [pc, #488]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170e:	2301      	movs	r3, #1
 8001710:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001712:	4b77      	ldr	r3, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x474>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171e:	4b74      	ldr	r3, [pc, #464]	; (80018f0 <HAL_RCC_OscConfig+0x474>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a73      	ldr	r2, [pc, #460]	; (80018f0 <HAL_RCC_OscConfig+0x474>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172a:	f7ff fbdf 	bl	8000eec <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001732:	f7ff fbdb 	bl	8000eec <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e10c      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	4b6a      	ldr	r3, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x474>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x2ea>
 8001758:	4b64      	ldr	r3, [pc, #400]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	4a63      	ldr	r2, [pc, #396]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6713      	str	r3, [r2, #112]	; 0x70
 8001764:	e01c      	b.n	80017a0 <HAL_RCC_OscConfig+0x324>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b05      	cmp	r3, #5
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x30c>
 800176e:	4b5f      	ldr	r3, [pc, #380]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	4a5e      	ldr	r2, [pc, #376]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6713      	str	r3, [r2, #112]	; 0x70
 800177a:	4b5c      	ldr	r3, [pc, #368]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 800177c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177e:	4a5b      	ldr	r2, [pc, #364]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6713      	str	r3, [r2, #112]	; 0x70
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0x324>
 8001788:	4b58      	ldr	r3, [pc, #352]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	4a57      	ldr	r2, [pc, #348]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6713      	str	r3, [r2, #112]	; 0x70
 8001794:	4b55      	ldr	r3, [pc, #340]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a54      	ldr	r2, [pc, #336]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 800179a:	f023 0304 	bic.w	r3, r3, #4
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d015      	beq.n	80017d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff fba0 	bl	8000eec <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b0:	f7ff fb9c 	bl	8000eec <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0cb      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c6:	4b49      	ldr	r3, [pc, #292]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0ee      	beq.n	80017b0 <HAL_RCC_OscConfig+0x334>
 80017d2:	e014      	b.n	80017fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff fb8a 	bl	8000eec <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff fb86 	bl	8000eec <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e0b5      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f2:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1ee      	bne.n	80017dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d105      	bne.n	8001810 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001804:	4b39      	ldr	r3, [pc, #228]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	4a38      	ldr	r2, [pc, #224]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 800180a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80a1 	beq.w	800195c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	2b08      	cmp	r3, #8
 8001824:	d05c      	beq.n	80018e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d141      	bne.n	80018b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182e:	4b31      	ldr	r3, [pc, #196]	; (80018f4 <HAL_RCC_OscConfig+0x478>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff fb5a 	bl	8000eec <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff fb56 	bl	8000eec <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e087      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184e:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69da      	ldr	r2, [r3, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	019b      	lsls	r3, r3, #6
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	3b01      	subs	r3, #1
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	061b      	lsls	r3, r3, #24
 800187e:	491b      	ldr	r1, [pc, #108]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_RCC_OscConfig+0x478>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fb2f 	bl	8000eec <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff fb2b 	bl	8000eec <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e05c      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x416>
 80018b0:	e054      	b.n	800195c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_RCC_OscConfig+0x478>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fb18 	bl	8000eec <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff fb14 	bl	8000eec <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e045      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_RCC_OscConfig+0x470>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x444>
 80018de:	e03d      	b.n	800195c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d107      	bne.n	80018f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e038      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000
 80018f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018f8:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_RCC_OscConfig+0x4ec>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d028      	beq.n	8001958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d121      	bne.n	8001958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d11a      	bne.n	8001958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001928:	4013      	ands	r3, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800192e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001930:	4293      	cmp	r3, r2
 8001932:	d111      	bne.n	8001958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	085b      	lsrs	r3, r3, #1
 8001940:	3b01      	subs	r3, #1
 8001942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d107      	bne.n	8001958 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0cc      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b68      	ldr	r3, [pc, #416]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d90c      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0b8      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d020      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c0:	4b59      	ldr	r3, [pc, #356]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d8:	4b53      	ldr	r3, [pc, #332]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4a52      	ldr	r2, [pc, #328]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	494d      	ldr	r1, [pc, #308]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d044      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d119      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e07f      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d003      	beq.n	8001a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e06f      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e067      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f023 0203 	bic.w	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4934      	ldr	r1, [pc, #208]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a5c:	f7ff fa46 	bl	8000eec <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7ff fa42 	bl	8000eec <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e04f      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 020c 	and.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1eb      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d20c      	bcs.n	8001ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e032      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4916      	ldr	r1, [pc, #88]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	490e      	ldr	r1, [pc, #56]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001af2:	f000 f821 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001af6:	4602      	mov	r2, r0
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	490a      	ldr	r1, [pc, #40]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	5ccb      	ldrb	r3, [r1, r3]
 8001b06:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f89c 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08006528 	.word	0x08006528
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b3c:	b094      	sub	sp, #80	; 0x50
 8001b3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	647b      	str	r3, [r7, #68]	; 0x44
 8001b44:	2300      	movs	r3, #0
 8001b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b48:	2300      	movs	r3, #0
 8001b4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b50:	4b79      	ldr	r3, [pc, #484]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 030c 	and.w	r3, r3, #12
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d00d      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x40>
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	f200 80e1 	bhi.w	8001d24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x34>
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d003      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b6a:	e0db      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b73      	ldr	r3, [pc, #460]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b70:	e0db      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b72:	4b73      	ldr	r3, [pc, #460]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b76:	e0d8      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b78:	4b6f      	ldr	r3, [pc, #444]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b82:	4b6d      	ldr	r3, [pc, #436]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d063      	beq.n	8001c56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b6a      	ldr	r3, [pc, #424]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	2200      	movs	r2, #0
 8001b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001baa:	4622      	mov	r2, r4
 8001bac:	462b      	mov	r3, r5
 8001bae:	f04f 0000 	mov.w	r0, #0
 8001bb2:	f04f 0100 	mov.w	r1, #0
 8001bb6:	0159      	lsls	r1, r3, #5
 8001bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bbc:	0150      	lsls	r0, r2, #5
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	1a51      	subs	r1, r2, r1
 8001bc6:	6139      	str	r1, [r7, #16]
 8001bc8:	4629      	mov	r1, r5
 8001bca:	eb63 0301 	sbc.w	r3, r3, r1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bdc:	4659      	mov	r1, fp
 8001bde:	018b      	lsls	r3, r1, #6
 8001be0:	4651      	mov	r1, sl
 8001be2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001be6:	4651      	mov	r1, sl
 8001be8:	018a      	lsls	r2, r1, #6
 8001bea:	4651      	mov	r1, sl
 8001bec:	ebb2 0801 	subs.w	r8, r2, r1
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	eb63 0901 	sbc.w	r9, r3, r1
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c0a:	4690      	mov	r8, r2
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	4623      	mov	r3, r4
 8001c10:	eb18 0303 	adds.w	r3, r8, r3
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	462b      	mov	r3, r5
 8001c18:	eb49 0303 	adc.w	r3, r9, r3
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c2a:	4629      	mov	r1, r5
 8001c2c:	024b      	lsls	r3, r1, #9
 8001c2e:	4621      	mov	r1, r4
 8001c30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c34:	4621      	mov	r1, r4
 8001c36:	024a      	lsls	r2, r1, #9
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c3e:	2200      	movs	r2, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c48:	f7fe fb1a 	bl	8000280 <__aeabi_uldivmod>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4613      	mov	r3, r2
 8001c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c54:	e058      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c56:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	099b      	lsrs	r3, r3, #6
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	4611      	mov	r1, r2
 8001c62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c66:	623b      	str	r3, [r7, #32]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c70:	4642      	mov	r2, r8
 8001c72:	464b      	mov	r3, r9
 8001c74:	f04f 0000 	mov.w	r0, #0
 8001c78:	f04f 0100 	mov.w	r1, #0
 8001c7c:	0159      	lsls	r1, r3, #5
 8001c7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c82:	0150      	lsls	r0, r2, #5
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4641      	mov	r1, r8
 8001c8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c8e:	4649      	mov	r1, r9
 8001c90:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ca0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ca4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ca8:	ebb2 040a 	subs.w	r4, r2, sl
 8001cac:	eb63 050b 	sbc.w	r5, r3, fp
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	00eb      	lsls	r3, r5, #3
 8001cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cbe:	00e2      	lsls	r2, r4, #3
 8001cc0:	4614      	mov	r4, r2
 8001cc2:	461d      	mov	r5, r3
 8001cc4:	4643      	mov	r3, r8
 8001cc6:	18e3      	adds	r3, r4, r3
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	464b      	mov	r3, r9
 8001ccc:	eb45 0303 	adc.w	r3, r5, r3
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cde:	4629      	mov	r1, r5
 8001ce0:	028b      	lsls	r3, r1, #10
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ce8:	4621      	mov	r1, r4
 8001cea:	028a      	lsls	r2, r1, #10
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	61fa      	str	r2, [r7, #28]
 8001cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cfc:	f7fe fac0 	bl	8000280 <__aeabi_uldivmod>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4613      	mov	r3, r2
 8001d06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	3301      	adds	r3, #1
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d22:	e002      	b.n	8001d2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3750      	adds	r7, #80	; 0x50
 8001d30:	46bd      	mov	sp, r7
 8001d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	00f42400 	.word	0x00f42400
 8001d40:	007a1200 	.word	0x007a1200

08001d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d48:	4b03      	ldr	r3, [pc, #12]	; (8001d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000000 	.word	0x20000000

08001d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d60:	f7ff fff0 	bl	8001d44 <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0a9b      	lsrs	r3, r3, #10
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4903      	ldr	r1, [pc, #12]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	08006538 	.word	0x08006538

08001d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d88:	f7ff ffdc 	bl	8001d44 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0b5b      	lsrs	r3, r3, #13
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	08006538 	.word	0x08006538

08001dac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	220f      	movs	r2, #15
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0203 	and.w	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_RCC_GetClockConfig+0x60>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0207 	and.w	r2, r3, #7
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	601a      	str	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e041      	b.n	8001ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f839 	bl	8001eae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f000 f9d8 	bl	8002204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d001      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e04e      	b.n	8001f7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <HAL_TIM_Base_Start_IT+0xc4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d022      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f06:	d01d      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_TIM_Base_Start_IT+0xc8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d018      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d013      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00e      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d111      	bne.n	8001f68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d010      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f66:	e007      	b.n	8001f78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40000c00 	.word	0x40000c00
 8001f98:	40010400 	.word	0x40010400
 8001f9c:	40014000 	.word	0x40014000
 8001fa0:	40001800 	.word	0x40001800

08001fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d122      	bne.n	8002000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0202 	mvn.w	r2, #2
 8001fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8ee 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8e0 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f8f1 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b04      	cmp	r3, #4
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b04      	cmp	r3, #4
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0204 	mvn.w	r2, #4
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8c4 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8b6 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f8c7 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b08      	cmp	r3, #8
 8002060:	d122      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b08      	cmp	r3, #8
 800206e:	d11b      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0208 	mvn.w	r2, #8
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2204      	movs	r2, #4
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f89a 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f88c 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f89d 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d122      	bne.n	80020fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d11b      	bne.n	80020fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0210 	mvn.w	r2, #16
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2208      	movs	r2, #8
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f870 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f862 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f873 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d10e      	bne.n	8002128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d107      	bne.n	8002128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0201 	mvn.w	r2, #1
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fd0c 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	2b80      	cmp	r3, #128	; 0x80
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	2b80      	cmp	r3, #128	; 0x80
 8002142:	d107      	bne.n	8002154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f902 	bl	8002358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d10e      	bne.n	8002180 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216c:	2b40      	cmp	r3, #64	; 0x40
 800216e:	d107      	bne.n	8002180 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f838 	bl	80021f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b20      	cmp	r3, #32
 800218c:	d10e      	bne.n	80021ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b20      	cmp	r3, #32
 800219a:	d107      	bne.n	80021ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0220 	mvn.w	r2, #32
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8cc 	bl	8002344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a40      	ldr	r2, [pc, #256]	; (8002318 <TIM_Base_SetConfig+0x114>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002222:	d00f      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3d      	ldr	r2, [pc, #244]	; (800231c <TIM_Base_SetConfig+0x118>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00b      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3c      	ldr	r2, [pc, #240]	; (8002320 <TIM_Base_SetConfig+0x11c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d007      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3b      	ldr	r2, [pc, #236]	; (8002324 <TIM_Base_SetConfig+0x120>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d003      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3a      	ldr	r2, [pc, #232]	; (8002328 <TIM_Base_SetConfig+0x124>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d108      	bne.n	8002256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a2f      	ldr	r2, [pc, #188]	; (8002318 <TIM_Base_SetConfig+0x114>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02b      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002264:	d027      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2c      	ldr	r2, [pc, #176]	; (800231c <TIM_Base_SetConfig+0x118>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d023      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <TIM_Base_SetConfig+0x11c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d01f      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <TIM_Base_SetConfig+0x120>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01b      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a29      	ldr	r2, [pc, #164]	; (8002328 <TIM_Base_SetConfig+0x124>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d017      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a28      	ldr	r2, [pc, #160]	; (800232c <TIM_Base_SetConfig+0x128>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a27      	ldr	r2, [pc, #156]	; (8002330 <TIM_Base_SetConfig+0x12c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00f      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a26      	ldr	r2, [pc, #152]	; (8002334 <TIM_Base_SetConfig+0x130>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00b      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a25      	ldr	r2, [pc, #148]	; (8002338 <TIM_Base_SetConfig+0x134>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a24      	ldr	r2, [pc, #144]	; (800233c <TIM_Base_SetConfig+0x138>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d003      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a23      	ldr	r2, [pc, #140]	; (8002340 <TIM_Base_SetConfig+0x13c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d108      	bne.n	80022c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <TIM_Base_SetConfig+0x114>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d003      	beq.n	80022fc <TIM_Base_SetConfig+0xf8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a0c      	ldr	r2, [pc, #48]	; (8002328 <TIM_Base_SetConfig+0x124>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d103      	bne.n	8002304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	615a      	str	r2, [r3, #20]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40010000 	.word	0x40010000
 800231c:	40000400 	.word	0x40000400
 8002320:	40000800 	.word	0x40000800
 8002324:	40000c00 	.word	0x40000c00
 8002328:	40010400 	.word	0x40010400
 800232c:	40014000 	.word	0x40014000
 8002330:	40014400 	.word	0x40014400
 8002334:	40014800 	.word	0x40014800
 8002338:	40001800 	.word	0x40001800
 800233c:	40001c00 	.word	0x40001c00
 8002340:	40002000 	.word	0x40002000

08002344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e03f      	b.n	80023fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fc14 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2224      	movs	r2, #36	; 0x24
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f929 	bl	8002608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b08a      	sub	sp, #40	; 0x28
 800240a:	af02      	add	r7, sp, #8
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	4613      	mov	r3, r2
 8002414:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b20      	cmp	r3, #32
 8002424:	d17c      	bne.n	8002520 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <HAL_UART_Transmit+0x2c>
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e075      	b.n	8002522 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_UART_Transmit+0x3e>
 8002440:	2302      	movs	r3, #2
 8002442:	e06e      	b.n	8002522 <HAL_UART_Transmit+0x11c>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2221      	movs	r2, #33	; 0x21
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800245a:	f7fe fd47 	bl	8000eec <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	88fa      	ldrh	r2, [r7, #6]
 8002464:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002474:	d108      	bne.n	8002488 <HAL_UART_Transmit+0x82>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	e003      	b.n	8002490 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002498:	e02a      	b.n	80024f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f840 	bl	800252a <UART_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e036      	b.n	8002522 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10b      	bne.n	80024d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	3302      	adds	r3, #2
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e007      	b.n	80024e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	3301      	adds	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1cf      	bne.n	800249a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2200      	movs	r2, #0
 8002502:	2140      	movs	r1, #64	; 0x40
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f810 	bl	800252a <UART_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e006      	b.n	8002522 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	e000      	b.n	8002522 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002520:	2302      	movs	r3, #2
  }
}
 8002522:	4618      	mov	r0, r3
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b090      	sub	sp, #64	; 0x40
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800253a:	e050      	b.n	80025de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800253e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002542:	d04c      	beq.n	80025de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <UART_WaitOnFlagUntilTimeout+0x30>
 800254a:	f7fe fccf 	bl	8000eec <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002556:	429a      	cmp	r2, r3
 8002558:	d241      	bcs.n	80025de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	e853 3f00 	ldrex	r3, [r3]
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	330c      	adds	r3, #12
 8002578:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800257a:	637a      	str	r2, [r7, #52]	; 0x34
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002582:	e841 2300 	strex	r3, r2, [r1]
 8002586:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e5      	bne.n	800255a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3314      	adds	r3, #20
 8002594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	e853 3f00 	ldrex	r3, [r3]
 800259c:	613b      	str	r3, [r7, #16]
   return(result);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3314      	adds	r3, #20
 80025ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025ae:	623a      	str	r2, [r7, #32]
 80025b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b2:	69f9      	ldr	r1, [r7, #28]
 80025b4:	6a3a      	ldr	r2, [r7, #32]
 80025b6:	e841 2300 	strex	r3, r2, [r1]
 80025ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1e5      	bne.n	800258e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e00f      	b.n	80025fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4013      	ands	r3, r2
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d09f      	beq.n	800253c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3740      	adds	r7, #64	; 0x40
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800260c:	b0c0      	sub	sp, #256	; 0x100
 800260e:	af00      	add	r7, sp, #0
 8002610:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002624:	68d9      	ldr	r1, [r3, #12]
 8002626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	ea40 0301 	orr.w	r3, r0, r1
 8002630:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	431a      	orrs	r2, r3
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	431a      	orrs	r2, r3
 8002648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002660:	f021 010c 	bic.w	r1, r1, #12
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800266e:	430b      	orrs	r3, r1
 8002670:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800267e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002682:	6999      	ldr	r1, [r3, #24]
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	ea40 0301 	orr.w	r3, r0, r1
 800268e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b8f      	ldr	r3, [pc, #572]	; (80028d4 <UART_SetConfig+0x2cc>)
 8002698:	429a      	cmp	r2, r3
 800269a:	d005      	beq.n	80026a8 <UART_SetConfig+0xa0>
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b8d      	ldr	r3, [pc, #564]	; (80028d8 <UART_SetConfig+0x2d0>)
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d104      	bne.n	80026b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026a8:	f7ff fb6c 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80026ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026b0:	e003      	b.n	80026ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026b2:	f7ff fb53 	bl	8001d5c <HAL_RCC_GetPCLK1Freq>
 80026b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c4:	f040 810c 	bne.w	80028e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026cc:	2200      	movs	r2, #0
 80026ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026da:	4622      	mov	r2, r4
 80026dc:	462b      	mov	r3, r5
 80026de:	1891      	adds	r1, r2, r2
 80026e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80026e2:	415b      	adcs	r3, r3
 80026e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026ea:	4621      	mov	r1, r4
 80026ec:	eb12 0801 	adds.w	r8, r2, r1
 80026f0:	4629      	mov	r1, r5
 80026f2:	eb43 0901 	adc.w	r9, r3, r1
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800270a:	4690      	mov	r8, r2
 800270c:	4699      	mov	r9, r3
 800270e:	4623      	mov	r3, r4
 8002710:	eb18 0303 	adds.w	r3, r8, r3
 8002714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002718:	462b      	mov	r3, r5
 800271a:	eb49 0303 	adc.w	r3, r9, r3
 800271e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800272e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002732:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002736:	460b      	mov	r3, r1
 8002738:	18db      	adds	r3, r3, r3
 800273a:	653b      	str	r3, [r7, #80]	; 0x50
 800273c:	4613      	mov	r3, r2
 800273e:	eb42 0303 	adc.w	r3, r2, r3
 8002742:	657b      	str	r3, [r7, #84]	; 0x54
 8002744:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002748:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800274c:	f7fd fd98 	bl	8000280 <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4b61      	ldr	r3, [pc, #388]	; (80028dc <UART_SetConfig+0x2d4>)
 8002756:	fba3 2302 	umull	r2, r3, r3, r2
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	011c      	lsls	r4, r3, #4
 800275e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002762:	2200      	movs	r2, #0
 8002764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002768:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800276c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002770:	4642      	mov	r2, r8
 8002772:	464b      	mov	r3, r9
 8002774:	1891      	adds	r1, r2, r2
 8002776:	64b9      	str	r1, [r7, #72]	; 0x48
 8002778:	415b      	adcs	r3, r3
 800277a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800277c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002780:	4641      	mov	r1, r8
 8002782:	eb12 0a01 	adds.w	sl, r2, r1
 8002786:	4649      	mov	r1, r9
 8002788:	eb43 0b01 	adc.w	fp, r3, r1
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002798:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800279c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027a0:	4692      	mov	sl, r2
 80027a2:	469b      	mov	fp, r3
 80027a4:	4643      	mov	r3, r8
 80027a6:	eb1a 0303 	adds.w	r3, sl, r3
 80027aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027ae:	464b      	mov	r3, r9
 80027b0:	eb4b 0303 	adc.w	r3, fp, r3
 80027b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027cc:	460b      	mov	r3, r1
 80027ce:	18db      	adds	r3, r3, r3
 80027d0:	643b      	str	r3, [r7, #64]	; 0x40
 80027d2:	4613      	mov	r3, r2
 80027d4:	eb42 0303 	adc.w	r3, r2, r3
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
 80027da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027e2:	f7fd fd4d 	bl	8000280 <__aeabi_uldivmod>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <UART_SetConfig+0x2d4>)
 80027ee:	fba3 2301 	umull	r2, r3, r3, r1
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2264      	movs	r2, #100	; 0x64
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	1acb      	subs	r3, r1, r3
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002802:	4b36      	ldr	r3, [pc, #216]	; (80028dc <UART_SetConfig+0x2d4>)
 8002804:	fba3 2302 	umull	r2, r3, r3, r2
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002810:	441c      	add	r4, r3
 8002812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002816:	2200      	movs	r2, #0
 8002818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800281c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002820:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002824:	4642      	mov	r2, r8
 8002826:	464b      	mov	r3, r9
 8002828:	1891      	adds	r1, r2, r2
 800282a:	63b9      	str	r1, [r7, #56]	; 0x38
 800282c:	415b      	adcs	r3, r3
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002830:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002834:	4641      	mov	r1, r8
 8002836:	1851      	adds	r1, r2, r1
 8002838:	6339      	str	r1, [r7, #48]	; 0x30
 800283a:	4649      	mov	r1, r9
 800283c:	414b      	adcs	r3, r1
 800283e:	637b      	str	r3, [r7, #52]	; 0x34
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800284c:	4659      	mov	r1, fp
 800284e:	00cb      	lsls	r3, r1, #3
 8002850:	4651      	mov	r1, sl
 8002852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002856:	4651      	mov	r1, sl
 8002858:	00ca      	lsls	r2, r1, #3
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	4603      	mov	r3, r0
 8002860:	4642      	mov	r2, r8
 8002862:	189b      	adds	r3, r3, r2
 8002864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002868:	464b      	mov	r3, r9
 800286a:	460a      	mov	r2, r1
 800286c:	eb42 0303 	adc.w	r3, r2, r3
 8002870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002880:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002884:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002888:	460b      	mov	r3, r1
 800288a:	18db      	adds	r3, r3, r3
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
 800288e:	4613      	mov	r3, r2
 8002890:	eb42 0303 	adc.w	r3, r2, r3
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800289a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800289e:	f7fd fcef 	bl	8000280 <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <UART_SetConfig+0x2d4>)
 80028a8:	fba3 1302 	umull	r1, r3, r3, r2
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	2164      	movs	r1, #100	; 0x64
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	3332      	adds	r3, #50	; 0x32
 80028ba:	4a08      	ldr	r2, [pc, #32]	; (80028dc <UART_SetConfig+0x2d4>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	095b      	lsrs	r3, r3, #5
 80028c2:	f003 0207 	and.w	r2, r3, #7
 80028c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4422      	add	r2, r4
 80028ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028d0:	e106      	b.n	8002ae0 <UART_SetConfig+0x4d8>
 80028d2:	bf00      	nop
 80028d4:	40011000 	.word	0x40011000
 80028d8:	40011400 	.word	0x40011400
 80028dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028e4:	2200      	movs	r2, #0
 80028e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028f2:	4642      	mov	r2, r8
 80028f4:	464b      	mov	r3, r9
 80028f6:	1891      	adds	r1, r2, r2
 80028f8:	6239      	str	r1, [r7, #32]
 80028fa:	415b      	adcs	r3, r3
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
 80028fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002902:	4641      	mov	r1, r8
 8002904:	1854      	adds	r4, r2, r1
 8002906:	4649      	mov	r1, r9
 8002908:	eb43 0501 	adc.w	r5, r3, r1
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	00eb      	lsls	r3, r5, #3
 8002916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800291a:	00e2      	lsls	r2, r4, #3
 800291c:	4614      	mov	r4, r2
 800291e:	461d      	mov	r5, r3
 8002920:	4643      	mov	r3, r8
 8002922:	18e3      	adds	r3, r4, r3
 8002924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002928:	464b      	mov	r3, r9
 800292a:	eb45 0303 	adc.w	r3, r5, r3
 800292e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800293e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800294e:	4629      	mov	r1, r5
 8002950:	008b      	lsls	r3, r1, #2
 8002952:	4621      	mov	r1, r4
 8002954:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002958:	4621      	mov	r1, r4
 800295a:	008a      	lsls	r2, r1, #2
 800295c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002960:	f7fd fc8e 	bl	8000280 <__aeabi_uldivmod>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4b60      	ldr	r3, [pc, #384]	; (8002aec <UART_SetConfig+0x4e4>)
 800296a:	fba3 2302 	umull	r2, r3, r3, r2
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	011c      	lsls	r4, r3, #4
 8002972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002976:	2200      	movs	r2, #0
 8002978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800297c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002980:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002984:	4642      	mov	r2, r8
 8002986:	464b      	mov	r3, r9
 8002988:	1891      	adds	r1, r2, r2
 800298a:	61b9      	str	r1, [r7, #24]
 800298c:	415b      	adcs	r3, r3
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002994:	4641      	mov	r1, r8
 8002996:	1851      	adds	r1, r2, r1
 8002998:	6139      	str	r1, [r7, #16]
 800299a:	4649      	mov	r1, r9
 800299c:	414b      	adcs	r3, r1
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029ac:	4659      	mov	r1, fp
 80029ae:	00cb      	lsls	r3, r1, #3
 80029b0:	4651      	mov	r1, sl
 80029b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029b6:	4651      	mov	r1, sl
 80029b8:	00ca      	lsls	r2, r1, #3
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	4603      	mov	r3, r0
 80029c0:	4642      	mov	r2, r8
 80029c2:	189b      	adds	r3, r3, r2
 80029c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029c8:	464b      	mov	r3, r9
 80029ca:	460a      	mov	r2, r1
 80029cc:	eb42 0303 	adc.w	r3, r2, r3
 80029d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80029de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029ec:	4649      	mov	r1, r9
 80029ee:	008b      	lsls	r3, r1, #2
 80029f0:	4641      	mov	r1, r8
 80029f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029f6:	4641      	mov	r1, r8
 80029f8:	008a      	lsls	r2, r1, #2
 80029fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029fe:	f7fd fc3f 	bl	8000280 <__aeabi_uldivmod>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	4b38      	ldr	r3, [pc, #224]	; (8002aec <UART_SetConfig+0x4e4>)
 8002a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	2264      	movs	r2, #100	; 0x64
 8002a12:	fb02 f303 	mul.w	r3, r2, r3
 8002a16:	1acb      	subs	r3, r1, r3
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	3332      	adds	r3, #50	; 0x32
 8002a1c:	4a33      	ldr	r2, [pc, #204]	; (8002aec <UART_SetConfig+0x4e4>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	441c      	add	r4, r3
 8002a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a2e:	2200      	movs	r2, #0
 8002a30:	673b      	str	r3, [r7, #112]	; 0x70
 8002a32:	677a      	str	r2, [r7, #116]	; 0x74
 8002a34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a38:	4642      	mov	r2, r8
 8002a3a:	464b      	mov	r3, r9
 8002a3c:	1891      	adds	r1, r2, r2
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	415b      	adcs	r3, r3
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a48:	4641      	mov	r1, r8
 8002a4a:	1851      	adds	r1, r2, r1
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	4649      	mov	r1, r9
 8002a50:	414b      	adcs	r3, r1
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a60:	4659      	mov	r1, fp
 8002a62:	00cb      	lsls	r3, r1, #3
 8002a64:	4651      	mov	r1, sl
 8002a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	00ca      	lsls	r2, r1, #3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	4642      	mov	r2, r8
 8002a76:	189b      	adds	r3, r3, r2
 8002a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a7a:	464b      	mov	r3, r9
 8002a7c:	460a      	mov	r2, r1
 8002a7e:	eb42 0303 	adc.w	r3, r2, r3
 8002a82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a8e:	667a      	str	r2, [r7, #100]	; 0x64
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	008b      	lsls	r3, r1, #2
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	008a      	lsls	r2, r1, #2
 8002aaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002aae:	f7fd fbe7 	bl	8000280 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <UART_SetConfig+0x4e4>)
 8002ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	2164      	movs	r1, #100	; 0x64
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	011b      	lsls	r3, r3, #4
 8002ac8:	3332      	adds	r3, #50	; 0x32
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <UART_SetConfig+0x4e4>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	f003 020f 	and.w	r2, r3, #15
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4422      	add	r2, r4
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aec:	51eb851f 	.word	0x51eb851f

08002af0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f103 0208 	add.w	r2, r3, #8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f103 0208 	add.w	r2, r3, #8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f103 0208 	add.w	r2, r3, #8
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d103      	bne.n	8002b6a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	e00c      	b.n	8002b84 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e002      	b.n	8002b78 <vListInsert+0x2e>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d2f6      	bcs.n	8002b72 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	601a      	str	r2, [r3, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6892      	ldr	r2, [r2, #8]
 8002bd2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6852      	ldr	r2, [r2, #4]
 8002bdc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d103      	bne.n	8002bf0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	1e5a      	subs	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d05d      	beq.n	8002d00 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d059      	beq.n	8002d00 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	2100      	movs	r1, #0
 8002c56:	fba3 2302 	umull	r2, r3, r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d000      	beq.n	8002c60 <xQueueGenericReset+0x50>
 8002c5e:	2101      	movs	r1, #1
 8002c60:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d14c      	bne.n	8002d00 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002c66:	f002 fc67 	bl	8005538 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	6939      	ldr	r1, [r7, #16]
 8002c74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	441a      	add	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2200      	movs	r2, #0
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c96:	3b01      	subs	r3, #1
 8002c98:	6939      	ldr	r1, [r7, #16]
 8002c9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	441a      	add	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	22ff      	movs	r2, #255	; 0xff
 8002cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d114      	bne.n	8002ce6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d01a      	beq.n	8002cfa <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	3310      	adds	r3, #16
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 fa55 	bl	8004178 <xTaskRemoveFromEventList>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002cd4:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <xQueueGenericReset+0x11c>)
 8002cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	e009      	b.n	8002cfa <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	3310      	adds	r3, #16
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff ff00 	bl	8002af0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	3324      	adds	r3, #36	; 0x24
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fefb 	bl	8002af0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002cfa:	f002 fc4d 	bl	8005598 <vPortExitCritical>
 8002cfe:	e001      	b.n	8002d04 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <xQueueGenericReset+0x110>
        __asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	60bb      	str	r3, [r7, #8]
    }
 8002d1c:	bf00      	nop
 8002d1e:	e7fe      	b.n	8002d1e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002d20:	697b      	ldr	r3, [r7, #20]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d02e      	beq.n	8002da6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002d48:	2100      	movs	r1, #0
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d000      	beq.n	8002d58 <xQueueGenericCreate+0x28>
 8002d56:	2101      	movs	r1, #1
 8002d58:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d123      	bne.n	8002da6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002d66:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002d6a:	d81c      	bhi.n	8002da6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	3350      	adds	r3, #80	; 0x50
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fcfe 	bl	800577c <pvPortMalloc>
 8002d80:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01c      	beq.n	8002dc2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3350      	adds	r3, #80	; 0x50
 8002d90:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d92:	79fa      	ldrb	r2, [r7, #7]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f814 	bl	8002dcc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002da4:	e00d      	b.n	8002dc2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericCreate+0x92>
        __asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	613b      	str	r3, [r7, #16]
    }
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
    }
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e002      	b.n	8002dee <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	69b8      	ldr	r0, [r7, #24]
 8002dfe:	f7ff ff07 	bl	8002c10 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d010      	beq.n	8002e48 <xQueueCreateCountingSemaphore+0x36>
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d80c      	bhi.n	8002e48 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002e2e:	2202      	movs	r2, #2
 8002e30:	2100      	movs	r1, #0
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ff7c 	bl	8002d30 <xQueueGenericCreate>
 8002e38:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d011      	beq.n	8002e64 <xQueueCreateCountingSemaphore+0x52>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8002e46:	e00d      	b.n	8002e64 <xQueueCreateCountingSemaphore+0x52>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10a      	bne.n	8002e64 <xQueueCreateCountingSemaphore+0x52>
        __asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	60bb      	str	r3, [r7, #8]
    }
 8002e60:	bf00      	nop
 8002e62:	e7fe      	b.n	8002e62 <xQueueCreateCountingSemaphore+0x50>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8002e64:	68fb      	ldr	r3, [r7, #12]
    }
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b092      	sub	sp, #72	; 0x48
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8002e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8002e98:	bf00      	nop
 8002e9a:	e7fe      	b.n	8002e9a <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <xQueueGenericSendFromISR+0x3c>
 8002ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <xQueueGenericSendFromISR+0x40>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <xQueueGenericSendFromISR+0x42>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002ec6:	bf00      	nop
 8002ec8:	e7fe      	b.n	8002ec8 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d103      	bne.n	8002ed8 <xQueueGenericSendFromISR+0x6a>
 8002ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <xQueueGenericSendFromISR+0x6e>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <xQueueGenericSendFromISR+0x70>
 8002edc:	2300      	movs	r3, #0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ef8:	f002 fc00 	bl	80056fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002efc:	f3ef 8211 	mrs	r2, BASEPRI
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	623a      	str	r2, [r7, #32]
 8002f12:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002f14:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f16:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d302      	bcc.n	8002f2a <xQueueGenericSendFromISR+0xbc>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d146      	bne.n	8002fb8 <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f30:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002f40:	f000 fae2 	bl	8003508 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002f44:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d112      	bne.n	8002f74 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d02d      	beq.n	8002fb2 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f58:	3324      	adds	r3, #36	; 0x24
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 f90c 	bl	8004178 <xTaskRemoveFromEventList>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d025      	beq.n	8002fb2 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d022      	beq.n	8002fb2 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e01e      	b.n	8002fb2 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002f74:	f000 ff18 	bl	8003da8 <uxTaskGetNumberOfTasks>
 8002f78:	6338      	str	r0, [r7, #48]	; 0x30
 8002f7a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d916      	bls.n	8002fb2 <xQueueGenericSendFromISR+0x144>
 8002f84:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002f88:	2b7f      	cmp	r3, #127	; 0x7f
 8002f8a:	d10a      	bne.n	8002fa2 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	61bb      	str	r3, [r7, #24]
    }
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueGenericSendFromISR+0x132>
 8002fa2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	b25a      	sxtb	r2, r3
 8002fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	647b      	str	r3, [r7, #68]	; 0x44
        {
 8002fb6:	e001      	b.n	8002fbc <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
 8002fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fbe:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002fc6:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3748      	adds	r7, #72	; 0x48
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b090      	sub	sp, #64	; 0x40
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	63bb      	str	r3, [r7, #56]	; 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <xQueueGiveFromISR+0x2a>
        __asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <xQueueGiveFromISR+0x48>
        __asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	623b      	str	r3, [r7, #32]
    }
 8003016:	bf00      	nop
 8003018:	e7fe      	b.n	8003018 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <xQueueGiveFromISR+0x58>
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <xQueueGiveFromISR+0x5c>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <xQueueGiveFromISR+0x5e>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <xQueueGiveFromISR+0x78>
        __asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	61fb      	str	r3, [r7, #28]
    }
 8003046:	bf00      	nop
 8003048:	e7fe      	b.n	8003048 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800304a:	f002 fb57 	bl	80056fc <vPortValidateInterruptPriority>
        __asm volatile
 800304e:	f3ef 8211 	mrs	r2, BASEPRI
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	61ba      	str	r2, [r7, #24]
 8003064:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8003066:	69bb      	ldr	r3, [r7, #24]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	633b      	str	r3, [r7, #48]	; 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8003070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003076:	429a      	cmp	r2, r3
 8003078:	d242      	bcs.n	8003100 <xQueueGiveFromISR+0x12e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308a:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800308c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003094:	d112      	bne.n	80030bc <xQueueGiveFromISR+0xea>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2b00      	cmp	r3, #0
 800309c:	d02d      	beq.n	80030fa <xQueueGiveFromISR+0x128>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a0:	3324      	adds	r3, #36	; 0x24
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 f868 	bl	8004178 <xTaskRemoveFromEventList>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d025      	beq.n	80030fa <xQueueGiveFromISR+0x128>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d022      	beq.n	80030fa <xQueueGiveFromISR+0x128>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e01e      	b.n	80030fa <xQueueGiveFromISR+0x128>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80030bc:	f000 fe74 	bl	8003da8 <uxTaskGetNumberOfTasks>
 80030c0:	62b8      	str	r0, [r7, #40]	; 0x28
 80030c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80030c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d916      	bls.n	80030fa <xQueueGiveFromISR+0x128>
 80030cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80030d0:	2b7f      	cmp	r3, #127	; 0x7f
 80030d2:	d10a      	bne.n	80030ea <xQueueGiveFromISR+0x118>
        __asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	613b      	str	r3, [r7, #16]
    }
 80030e6:	bf00      	nop
 80030e8:	e7fe      	b.n	80030e8 <xQueueGiveFromISR+0x116>
 80030ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030ee:	3301      	adds	r3, #1
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	b25a      	sxtb	r2, r3
 80030f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80030fa:	2301      	movs	r3, #1
 80030fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030fe:	e001      	b.n	8003104 <xQueueGiveFromISR+0x132>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003100:	2300      	movs	r3, #0
 8003102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003106:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f383 8811 	msr	BASEPRI, r3
    }
 800310e:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003112:	4618      	mov	r0, r3
 8003114:	3740      	adds	r7, #64	; 0x40
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08c      	sub	sp, #48	; 0x30
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003128:	2300      	movs	r3, #0
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <xQueueReceive+0x30>
        __asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	623b      	str	r3, [r7, #32]
    }
 8003148:	bf00      	nop
 800314a:	e7fe      	b.n	800314a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <xQueueReceive+0x3e>
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <xQueueReceive+0x42>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <xQueueReceive+0x44>
 800315e:	2300      	movs	r3, #0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <xQueueReceive+0x5e>
        __asm volatile
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	61fb      	str	r3, [r7, #28]
    }
 8003176:	bf00      	nop
 8003178:	e7fe      	b.n	8003178 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800317a:	f001 fa0d 	bl	8004598 <xTaskGetSchedulerState>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d102      	bne.n	800318a <xQueueReceive+0x6e>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <xQueueReceive+0x72>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <xQueueReceive+0x74>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10a      	bne.n	80031aa <xQueueReceive+0x8e>
        __asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	61bb      	str	r3, [r7, #24]
    }
 80031a6:	bf00      	nop
 80031a8:	e7fe      	b.n	80031a8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80031aa:	f002 f9c5 	bl	8005538 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d01f      	beq.n	80031fa <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031be:	f000 fa0d 	bl	80035dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	1e5a      	subs	r2, r3, #1
 80031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00f      	beq.n	80031f2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	3310      	adds	r3, #16
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 ffce 	bl	8004178 <xTaskRemoveFromEventList>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80031e2:	4b3d      	ldr	r3, [pc, #244]	; (80032d8 <xQueueReceive+0x1bc>)
 80031e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80031f2:	f002 f9d1 	bl	8005598 <vPortExitCritical>
                return pdPASS;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e069      	b.n	80032ce <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d103      	bne.n	8003208 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003200:	f002 f9ca 	bl	8005598 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003204:	2300      	movs	r3, #0
 8003206:	e062      	b.n	80032ce <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800320e:	f107 0310 	add.w	r3, r7, #16
 8003212:	4618      	mov	r0, r3
 8003214:	f001 f886 	bl	8004324 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003218:	2301      	movs	r3, #1
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800321c:	f002 f9bc 	bl	8005598 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003220:	f000 fca8 	bl	8003b74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003224:	f002 f988 	bl	8005538 <vPortEnterCritical>
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800322e:	b25b      	sxtb	r3, r3
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d103      	bne.n	800323e <xQueueReceive+0x122>
 8003236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003244:	b25b      	sxtb	r3, r3
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d103      	bne.n	8003254 <xQueueReceive+0x138>
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003254:	f002 f9a0 	bl	8005598 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003258:	1d3a      	adds	r2, r7, #4
 800325a:	f107 0310 	add.w	r3, r7, #16
 800325e:	4611      	mov	r1, r2
 8003260:	4618      	mov	r0, r3
 8003262:	f001 f875 	bl	8004350 <xTaskCheckForTimeOut>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d123      	bne.n	80032b4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800326c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800326e:	f000 fa2d 	bl	80036cc <prvIsQueueEmpty>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d017      	beq.n	80032a8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	3324      	adds	r3, #36	; 0x24
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f000 ff0f 	bl	80040a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003288:	f000 f9ce 	bl	8003628 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800328c:	f000 fc80 	bl	8003b90 <xTaskResumeAll>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d189      	bne.n	80031aa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <xQueueReceive+0x1bc>)
 8003298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	e780      	b.n	80031aa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80032a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032aa:	f000 f9bd 	bl	8003628 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80032ae:	f000 fc6f 	bl	8003b90 <xTaskResumeAll>
 80032b2:	e77a      	b.n	80031aa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80032b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032b6:	f000 f9b7 	bl	8003628 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80032ba:	f000 fc69 	bl	8003b90 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c0:	f000 fa04 	bl	80036cc <prvIsQueueEmpty>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f43f af6f 	beq.w	80031aa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80032cc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3730      	adds	r7, #48	; 0x30
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08c      	sub	sp, #48	; 0x30
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <xQueueSemaphoreTake+0x32>
        __asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	61bb      	str	r3, [r7, #24]
    }
 800330a:	bf00      	nop
 800330c:	e7fe      	b.n	800330c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8003316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331a:	f383 8811 	msr	BASEPRI, r3
 800331e:	f3bf 8f6f 	isb	sy
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	617b      	str	r3, [r7, #20]
    }
 8003328:	bf00      	nop
 800332a:	e7fe      	b.n	800332a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800332c:	f001 f934 	bl	8004598 <xTaskGetSchedulerState>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d102      	bne.n	800333c <xQueueSemaphoreTake+0x60>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <xQueueSemaphoreTake+0x64>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <xQueueSemaphoreTake+0x66>
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	613b      	str	r3, [r7, #16]
    }
 8003358:	bf00      	nop
 800335a:	e7fe      	b.n	800335a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800335c:	f002 f8ec 	bl	8005538 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d024      	beq.n	80033b6 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	1e5a      	subs	r2, r3, #1
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800337c:	f001 fb24 	bl	80049c8 <pvTaskIncrementMutexHeldCount>
 8003380:	4602      	mov	r2, r0
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00f      	beq.n	80033ae <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	3310      	adds	r3, #16
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fef0 	bl	8004178 <xTaskRemoveFromEventList>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800339e:	4b4d      	ldr	r3, [pc, #308]	; (80034d4 <xQueueSemaphoreTake+0x1f8>)
 80033a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80033ae:	f002 f8f3 	bl	8005598 <vPortExitCritical>
                return pdPASS;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e089      	b.n	80034ca <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80033bc:	f002 f8ec 	bl	8005598 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e082      	b.n	80034ca <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80033ca:	f107 0308 	add.w	r3, r7, #8
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 ffa8 	bl	8004324 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80033d8:	f002 f8de 	bl	8005598 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80033dc:	f000 fbca 	bl	8003b74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80033e0:	f002 f8aa 	bl	8005538 <vPortEnterCritical>
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d103      	bne.n	80033fa <xQueueSemaphoreTake+0x11e>
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003400:	b25b      	sxtb	r3, r3
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d103      	bne.n	8003410 <xQueueSemaphoreTake+0x134>
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003410:	f002 f8c2 	bl	8005598 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003414:	463a      	mov	r2, r7
 8003416:	f107 0308 	add.w	r3, r7, #8
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f000 ff97 	bl	8004350 <xTaskCheckForTimeOut>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d132      	bne.n	800348e <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800342a:	f000 f94f 	bl	80036cc <prvIsQueueEmpty>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d026      	beq.n	8003482 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 800343c:	f002 f87c 	bl	8005538 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4618      	mov	r0, r3
 8003446:	f001 f8c5 	bl	80045d4 <xTaskPriorityInherit>
 800344a:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 800344c:	f002 f8a4 	bl	8005598 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	3324      	adds	r3, #36	; 0x24
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fe23 	bl	80040a4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800345e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003460:	f000 f8e2 	bl	8003628 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003464:	f000 fb94 	bl	8003b90 <xTaskResumeAll>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	f47f af76 	bne.w	800335c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003470:	4b18      	ldr	r3, [pc, #96]	; (80034d4 <xQueueSemaphoreTake+0x1f8>)
 8003472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	e76c      	b.n	800335c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003484:	f000 f8d0 	bl	8003628 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003488:	f000 fb82 	bl	8003b90 <xTaskResumeAll>
 800348c:	e766      	b.n	800335c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800348e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003490:	f000 f8ca 	bl	8003628 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003494:	f000 fb7c 	bl	8003b90 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800349a:	f000 f917 	bl	80036cc <prvIsQueueEmpty>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f43f af5b 	beq.w	800335c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80034a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 80034ac:	f002 f844 	bl	8005538 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80034b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034b2:	f000 f811 	bl	80034d8 <prvGetDisinheritPriorityAfterTimeout>
 80034b6:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	69f9      	ldr	r1, [r7, #28]
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 f9ca 	bl	8004858 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80034c4:	f002 f868 	bl	8005598 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80034c8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3730      	adds	r7, #48	; 0x30
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	e000ed04 	.word	0xe000ed04

080034d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d006      	beq.n	80034f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f1c3 0305 	rsb	r3, r3, #5
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e001      	b.n	80034fa <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80034fa:	68fb      	ldr	r3, [r7, #12]
    }
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d14d      	bne.n	80035ca <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f001 f8ec 	bl	8004710 <xTaskPriorityDisinherit>
 8003538:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	e043      	b.n	80035ca <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d119      	bne.n	800357c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6858      	ldr	r0, [r3, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	461a      	mov	r2, r3
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	f002 fb32 	bl	8005bbc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	441a      	add	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	d32b      	bcc.n	80035ca <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	e026      	b.n	80035ca <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	68d8      	ldr	r0, [r3, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	461a      	mov	r2, r3
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	f002 fb18 	bl	8005bbc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	425b      	negs	r3, r3
 8003596:	441a      	add	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d207      	bcs.n	80035b8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	425b      	negs	r3, r3
 80035b2:	441a      	add	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d105      	bne.n	80035ca <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80035d2:	697b      	ldr	r3, [r7, #20]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d018      	beq.n	8003620 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	441a      	add	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	429a      	cmp	r2, r3
 8003606:	d303      	bcc.n	8003610 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68d9      	ldr	r1, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	461a      	mov	r2, r3
 800361a:	6838      	ldr	r0, [r7, #0]
 800361c:	f002 face 	bl	8005bbc <memcpy>
    }
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003630:	f001 ff82 	bl	8005538 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800363a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800363c:	e011      	b.n	8003662 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2b00      	cmp	r3, #0
 8003644:	d012      	beq.n	800366c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3324      	adds	r3, #36	; 0x24
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fd94 	bl	8004178 <xTaskRemoveFromEventList>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003656:	f000 fee1 	bl	800441c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	3b01      	subs	r3, #1
 800365e:	b2db      	uxtb	r3, r3
 8003660:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003666:	2b00      	cmp	r3, #0
 8003668:	dce9      	bgt.n	800363e <prvUnlockQueue+0x16>
 800366a:	e000      	b.n	800366e <prvUnlockQueue+0x46>
                    break;
 800366c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003676:	f001 ff8f 	bl	8005598 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800367a:	f001 ff5d 	bl	8005538 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003684:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003686:	e011      	b.n	80036ac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d012      	beq.n	80036b6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3310      	adds	r3, #16
 8003694:	4618      	mov	r0, r3
 8003696:	f000 fd6f 	bl	8004178 <xTaskRemoveFromEventList>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80036a0:	f000 febc 	bl	800441c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80036a4:	7bbb      	ldrb	r3, [r7, #14]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80036ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	dce9      	bgt.n	8003688 <prvUnlockQueue+0x60>
 80036b4:	e000      	b.n	80036b8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80036b6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	22ff      	movs	r2, #255	; 0xff
 80036bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80036c0:	f001 ff6a 	bl	8005598 <vPortExitCritical>
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80036d4:	f001 ff30 	bl	8005538 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80036e0:	2301      	movs	r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e001      	b.n	80036ea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80036ea:	f001 ff55 	bl	8005598 <vPortExitCritical>

    return xReturn;
 80036ee:	68fb      	ldr	r3, [r7, #12]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800370c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	60fb      	str	r3, [r7, #12]
    }
 800371e:	bf00      	nop
 8003720:	e7fe      	b.n	8003720 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d024      	beq.n	8003772 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e01e      	b.n	800376c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800372e:	4a18      	ldr	r2, [pc, #96]	; (8003790 <vQueueAddToRegistry+0x98>)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	429a      	cmp	r2, r3
 800373c:	d105      	bne.n	800374a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4a13      	ldr	r2, [pc, #76]	; (8003790 <vQueueAddToRegistry+0x98>)
 8003744:	4413      	add	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
                    break;
 8003748:	e013      	b.n	8003772 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <vQueueAddToRegistry+0x6e>
 8003750:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <vQueueAddToRegistry+0x98>)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d104      	bne.n	8003766 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <vQueueAddToRegistry+0x98>)
 8003762:	4413      	add	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3301      	adds	r3, #1
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2b07      	cmp	r3, #7
 8003770:	d9dd      	bls.n	800372e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	20000124 	.word	0x20000124

08003794 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80037a4:	f001 fec8 	bl	8005538 <vPortEnterCritical>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ae:	b25b      	sxtb	r3, r3
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d103      	bne.n	80037be <vQueueWaitForMessageRestricted+0x2a>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d103      	bne.n	80037d4 <vQueueWaitForMessageRestricted+0x40>
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d4:	f001 fee0 	bl	8005598 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3324      	adds	r3, #36	; 0x24
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fc7f 	bl	80040ec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80037ee:	6978      	ldr	r0, [r7, #20]
 80037f0:	f7ff ff1a 	bl	8003628 <prvUnlockQueue>
    }
 80037f4:	bf00      	nop
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08c      	sub	sp, #48	; 0x30
 8003800:	af04      	add	r7, sp, #16
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4618      	mov	r0, r3
 8003812:	f001 ffb3 	bl	800577c <pvPortMalloc>
 8003816:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d013      	beq.n	8003846 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800381e:	2058      	movs	r0, #88	; 0x58
 8003820:	f001 ffac 	bl	800577c <pvPortMalloc>
 8003824:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800382c:	2258      	movs	r2, #88	; 0x58
 800382e:	2100      	movs	r1, #0
 8003830:	69f8      	ldr	r0, [r7, #28]
 8003832:	f002 f98f 	bl	8005b54 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
 800383c:	e005      	b.n	800384a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f002 f856 	bl	80058f0 <vPortFree>
 8003844:	e001      	b.n	800384a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d013      	beq.n	8003878 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	2300      	movs	r3, #0
 8003854:	9303      	str	r3, [sp, #12]
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	9302      	str	r3, [sp, #8]
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f80e 	bl	8003888 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800386c:	69f8      	ldr	r0, [r7, #28]
 800386e:	f000 f899 	bl	80039a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003872:	2301      	movs	r3, #1
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e002      	b.n	800387e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003878:	f04f 33ff 	mov.w	r3, #4294967295
 800387c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800387e:	69bb      	ldr	r3, [r7, #24]
    }
 8003880:	4618      	mov	r0, r3
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	461a      	mov	r2, r3
 80038a0:	21a5      	movs	r1, #165	; 0xa5
 80038a2:	f002 f957 	bl	8005b54 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038b0:	3b01      	subs	r3, #1
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f023 0307 	bic.w	r3, r3, #7
 80038be:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <prvInitialiseNewTask+0x58>
        __asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	617b      	str	r3, [r7, #20]
    }
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01e      	beq.n	8003924 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	e012      	b.n	8003912 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	4413      	add	r3, r2
 80038f2:	7819      	ldrb	r1, [r3, #0]
 80038f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	3334      	adds	r3, #52	; 0x34
 80038fc:	460a      	mov	r2, r1
 80038fe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d006      	beq.n	800391a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	3301      	adds	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	2b09      	cmp	r3, #9
 8003916:	d9e9      	bls.n	80038ec <prvInitialiseNewTask+0x64>
 8003918:	e000      	b.n	800391c <prvInitialiseNewTask+0x94>
            {
                break;
 800391a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	2b04      	cmp	r3, #4
 8003928:	d90a      	bls.n	8003940 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	613b      	str	r3, [r7, #16]
    }
 800393c:	bf00      	nop
 800393e:	e7fe      	b.n	800393e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003942:	2b04      	cmp	r3, #4
 8003944:	d901      	bls.n	800394a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003946:	2304      	movs	r3, #4
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003954:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	3304      	adds	r3, #4
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f8e8 	bl	8002b30 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	3318      	adds	r3, #24
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff f8e3 	bl	8002b30 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	f1c3 0205 	rsb	r2, r3, #5
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	68f9      	ldr	r1, [r7, #12]
 8003984:	69b8      	ldr	r0, [r7, #24]
 8003986:	f001 fca5 	bl	80052d4 <pxPortInitialiseStack>
 800398a:	4602      	mov	r2, r0
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800399a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800399c:	bf00      	nop
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80039ac:	f001 fdc4 	bl	8005538 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80039b0:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <prvAddNewTaskToReadyList+0x110>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	4a3f      	ldr	r2, [pc, #252]	; (8003ab4 <prvAddNewTaskToReadyList+0x110>)
 80039b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80039ba:	4b3f      	ldr	r3, [pc, #252]	; (8003ab8 <prvAddNewTaskToReadyList+0x114>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80039c2:	4a3d      	ldr	r2, [pc, #244]	; (8003ab8 <prvAddNewTaskToReadyList+0x114>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039c8:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <prvAddNewTaskToReadyList+0x110>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d110      	bne.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80039d0:	f000 fd48 	bl	8004464 <prvInitialiseTaskLists>
 80039d4:	e00d      	b.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80039d6:	4b39      	ldr	r3, [pc, #228]	; (8003abc <prvAddNewTaskToReadyList+0x118>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039de:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <prvAddNewTaskToReadyList+0x114>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d802      	bhi.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80039ec:	4a32      	ldr	r2, [pc, #200]	; (8003ab8 <prvAddNewTaskToReadyList+0x114>)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80039f2:	4b33      	ldr	r3, [pc, #204]	; (8003ac0 <prvAddNewTaskToReadyList+0x11c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3301      	adds	r3, #1
 80039f8:	4a31      	ldr	r2, [pc, #196]	; (8003ac0 <prvAddNewTaskToReadyList+0x11c>)
 80039fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039fc:	4b30      	ldr	r3, [pc, #192]	; (8003ac0 <prvAddNewTaskToReadyList+0x11c>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	2201      	movs	r2, #1
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <prvAddNewTaskToReadyList+0x120>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	4a2c      	ldr	r2, [pc, #176]	; (8003ac4 <prvAddNewTaskToReadyList+0x120>)
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1a:	492b      	ldr	r1, [pc, #172]	; (8003ac8 <prvAddNewTaskToReadyList+0x124>)
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3304      	adds	r3, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	609a      	str	r2, [r3, #8]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	3204      	adds	r2, #4
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1d1a      	adds	r2, r3, #4
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4a1b      	ldr	r2, [pc, #108]	; (8003ac8 <prvAddNewTaskToReadyList+0x124>)
 8003a5a:	441a      	add	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	615a      	str	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a64:	4918      	ldr	r1, [pc, #96]	; (8003ac8 <prvAddNewTaskToReadyList+0x124>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	1c59      	adds	r1, r3, #1
 8003a74:	4814      	ldr	r0, [pc, #80]	; (8003ac8 <prvAddNewTaskToReadyList+0x124>)
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4403      	add	r3, r0
 8003a80:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003a82:	f001 fd89 	bl	8005598 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003a86:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <prvAddNewTaskToReadyList+0x118>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00e      	beq.n	8003aac <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a8e:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <prvAddNewTaskToReadyList+0x114>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d207      	bcs.n	8003aac <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <prvAddNewTaskToReadyList+0x128>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003aac:	bf00      	nop
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	2000023c 	.word	0x2000023c
 8003ab8:	20000164 	.word	0x20000164
 8003abc:	20000248 	.word	0x20000248
 8003ac0:	20000258 	.word	0x20000258
 8003ac4:	20000244 	.word	0x20000244
 8003ac8:	20000168 	.word	0x20000168
 8003acc:	e000ed04 	.word	0xe000ed04

08003ad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003ad6:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <vTaskStartScheduler+0x88>)
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	2300      	movs	r3, #0
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2282      	movs	r2, #130	; 0x82
 8003ae2:	491e      	ldr	r1, [pc, #120]	; (8003b5c <vTaskStartScheduler+0x8c>)
 8003ae4:	481e      	ldr	r0, [pc, #120]	; (8003b60 <vTaskStartScheduler+0x90>)
 8003ae6:	f7ff fe89 	bl	80037fc <xTaskCreate>
 8003aea:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d102      	bne.n	8003af8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003af2:	f001 f96b 	bl	8004dcc <xTimerCreateTimerTask>
 8003af6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d116      	bne.n	8003b2c <vTaskStartScheduler+0x5c>
        __asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	60bb      	str	r3, [r7, #8]
    }
 8003b10:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <vTaskStartScheduler+0x94>)
 8003b14:	f04f 32ff 	mov.w	r2, #4294967295
 8003b18:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003b1a:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <vTaskStartScheduler+0x98>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <vTaskStartScheduler+0x9c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003b26:	f001 fc65 	bl	80053f4 <xPortStartScheduler>
 8003b2a:	e00e      	b.n	8003b4a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d10a      	bne.n	8003b4a <vTaskStartScheduler+0x7a>
        __asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	607b      	str	r3, [r7, #4]
    }
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <vTaskStartScheduler+0xa0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000260 	.word	0x20000260
 8003b5c:	08006510 	.word	0x08006510
 8003b60:	08004435 	.word	0x08004435
 8003b64:	2000025c 	.word	0x2000025c
 8003b68:	20000248 	.word	0x20000248
 8003b6c:	20000240 	.word	0x20000240
 8003b70:	2000000c 	.word	0x2000000c

08003b74 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <vTaskSuspendAll+0x18>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	4a03      	ldr	r2, [pc, #12]	; (8003b8c <vTaskSuspendAll+0x18>)
 8003b80:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	20000264 	.word	0x20000264

08003b90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003b9e:	4b71      	ldr	r3, [pc, #452]	; (8003d64 <xTaskResumeAll+0x1d4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10a      	bne.n	8003bbc <xTaskResumeAll+0x2c>
        __asm volatile
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	f383 8811 	msr	BASEPRI, r3
 8003bae:	f3bf 8f6f 	isb	sy
 8003bb2:	f3bf 8f4f 	dsb	sy
 8003bb6:	607b      	str	r3, [r7, #4]
    }
 8003bb8:	bf00      	nop
 8003bba:	e7fe      	b.n	8003bba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003bbc:	f001 fcbc 	bl	8005538 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003bc0:	4b68      	ldr	r3, [pc, #416]	; (8003d64 <xTaskResumeAll+0x1d4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	4a67      	ldr	r2, [pc, #412]	; (8003d64 <xTaskResumeAll+0x1d4>)
 8003bc8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bca:	4b66      	ldr	r3, [pc, #408]	; (8003d64 <xTaskResumeAll+0x1d4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f040 80c0 	bne.w	8003d54 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bd4:	4b64      	ldr	r3, [pc, #400]	; (8003d68 <xTaskResumeAll+0x1d8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80bb 	beq.w	8003d54 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bde:	e08a      	b.n	8003cf6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be0:	4b62      	ldr	r3, [pc, #392]	; (8003d6c <xTaskResumeAll+0x1dc>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	6a12      	ldr	r2, [r2, #32]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	69d2      	ldr	r2, [r2, #28]
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3318      	adds	r3, #24
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d103      	bne.n	8003c16 <xTaskResumeAll+0x86>
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	6a1a      	ldr	r2, [r3, #32]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	1e5a      	subs	r2, r3, #1
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	68d2      	ldr	r2, [r2, #12]
 8003c34:	609a      	str	r2, [r3, #8]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	6892      	ldr	r2, [r2, #8]
 8003c3e:	605a      	str	r2, [r3, #4]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	3304      	adds	r3, #4
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d103      	bne.n	8003c54 <xTaskResumeAll+0xc4>
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2200      	movs	r2, #0
 8003c58:	615a      	str	r2, [r3, #20]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	1e5a      	subs	r2, r3, #1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	2201      	movs	r2, #1
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	4b40      	ldr	r3, [pc, #256]	; (8003d70 <xTaskResumeAll+0x1e0>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	4a3f      	ldr	r2, [pc, #252]	; (8003d70 <xTaskResumeAll+0x1e0>)
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7a:	493e      	ldr	r1, [pc, #248]	; (8003d74 <xTaskResumeAll+0x1e4>)
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	3304      	adds	r3, #4
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	3204      	adds	r2, #4
 8003ca2:	605a      	str	r2, [r3, #4]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	1d1a      	adds	r2, r3, #4
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4a2e      	ldr	r2, [pc, #184]	; (8003d74 <xTaskResumeAll+0x1e4>)
 8003cba:	441a      	add	r2, r3
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	615a      	str	r2, [r3, #20]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	492b      	ldr	r1, [pc, #172]	; (8003d74 <xTaskResumeAll+0x1e4>)
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	1c59      	adds	r1, r3, #1
 8003cd4:	4827      	ldr	r0, [pc, #156]	; (8003d74 <xTaskResumeAll+0x1e4>)
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4403      	add	r3, r0
 8003ce0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <xTaskResumeAll+0x1e8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d302      	bcc.n	8003cf6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003cf0:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <xTaskResumeAll+0x1ec>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <xTaskResumeAll+0x1dc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f47f af70 	bne.w	8003be0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003d06:	f000 fc2b 	bl	8004560 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d0a:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <xTaskResumeAll+0x1f0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d010      	beq.n	8003d38 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003d16:	f000 f853 	bl	8003dc0 <xTaskIncrementTick>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003d20:	4b16      	ldr	r3, [pc, #88]	; (8003d7c <xTaskResumeAll+0x1ec>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f1      	bne.n	8003d16 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003d32:	4b13      	ldr	r3, [pc, #76]	; (8003d80 <xTaskResumeAll+0x1f0>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003d38:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <xTaskResumeAll+0x1ec>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003d44:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <xTaskResumeAll+0x1f4>)
 8003d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003d54:	f001 fc20 	bl	8005598 <vPortExitCritical>

    return xAlreadyYielded;
 8003d58:	69bb      	ldr	r3, [r7, #24]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000264 	.word	0x20000264
 8003d68:	2000023c 	.word	0x2000023c
 8003d6c:	200001fc 	.word	0x200001fc
 8003d70:	20000244 	.word	0x20000244
 8003d74:	20000168 	.word	0x20000168
 8003d78:	20000164 	.word	0x20000164
 8003d7c:	20000250 	.word	0x20000250
 8003d80:	2000024c 	.word	0x2000024c
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003d8e:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <xTaskGetTickCount+0x1c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003d94:	687b      	ldr	r3, [r7, #4]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000240 	.word	0x20000240

08003da8 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <uxTaskGetNumberOfTasks+0x14>)
 8003dae:	681b      	ldr	r3, [r3, #0]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	2000023c 	.word	0x2000023c

08003dc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dca:	4b7d      	ldr	r3, [pc, #500]	; (8003fc0 <xTaskIncrementTick+0x200>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 80ec 	bne.w	8003fac <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dd4:	4b7b      	ldr	r3, [pc, #492]	; (8003fc4 <xTaskIncrementTick+0x204>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003ddc:	4a79      	ldr	r2, [pc, #484]	; (8003fc4 <xTaskIncrementTick+0x204>)
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d120      	bne.n	8003e2a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003de8:	4b77      	ldr	r3, [pc, #476]	; (8003fc8 <xTaskIncrementTick+0x208>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <xTaskIncrementTick+0x48>
        __asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	607b      	str	r3, [r7, #4]
    }
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <xTaskIncrementTick+0x46>
 8003e08:	4b6f      	ldr	r3, [pc, #444]	; (8003fc8 <xTaskIncrementTick+0x208>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	4b6f      	ldr	r3, [pc, #444]	; (8003fcc <xTaskIncrementTick+0x20c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a6d      	ldr	r2, [pc, #436]	; (8003fc8 <xTaskIncrementTick+0x208>)
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4a6d      	ldr	r2, [pc, #436]	; (8003fcc <xTaskIncrementTick+0x20c>)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4b6c      	ldr	r3, [pc, #432]	; (8003fd0 <xTaskIncrementTick+0x210>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3301      	adds	r3, #1
 8003e22:	4a6b      	ldr	r2, [pc, #428]	; (8003fd0 <xTaskIncrementTick+0x210>)
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	f000 fb9b 	bl	8004560 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003e2a:	4b6a      	ldr	r3, [pc, #424]	; (8003fd4 <xTaskIncrementTick+0x214>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6a3a      	ldr	r2, [r7, #32]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	f0c0 80a6 	bcc.w	8003f82 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e36:	4b64      	ldr	r3, [pc, #400]	; (8003fc8 <xTaskIncrementTick+0x208>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d104      	bne.n	8003e4a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e40:	4b64      	ldr	r3, [pc, #400]	; (8003fd4 <xTaskIncrementTick+0x214>)
 8003e42:	f04f 32ff 	mov.w	r2, #4294967295
 8003e46:	601a      	str	r2, [r3, #0]
                    break;
 8003e48:	e09b      	b.n	8003f82 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e4a:	4b5f      	ldr	r3, [pc, #380]	; (8003fc8 <xTaskIncrementTick+0x208>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003e5a:	6a3a      	ldr	r2, [r7, #32]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d203      	bcs.n	8003e6a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003e62:	4a5c      	ldr	r2, [pc, #368]	; (8003fd4 <xTaskIncrementTick+0x214>)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003e68:	e08b      	b.n	8003f82 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	68d2      	ldr	r2, [r2, #12]
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	6892      	ldr	r2, [r2, #8]
 8003e82:	605a      	str	r2, [r3, #4]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d103      	bne.n	8003e98 <xTaskIncrementTick+0xd8>
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	615a      	str	r2, [r3, #20]
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	1e5a      	subs	r2, r3, #1
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d01e      	beq.n	8003eee <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	6a12      	ldr	r2, [r2, #32]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	69d2      	ldr	r2, [r2, #28]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	3318      	adds	r3, #24
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d103      	bne.n	8003ede <xTaskIncrementTick+0x11e>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	6a1a      	ldr	r2, [r3, #32]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	1e5a      	subs	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	4b38      	ldr	r3, [pc, #224]	; (8003fd8 <xTaskIncrementTick+0x218>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <xTaskIncrementTick+0x218>)
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f04:	4935      	ldr	r1, [pc, #212]	; (8003fdc <xTaskIncrementTick+0x21c>)
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	3304      	adds	r3, #4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	3204      	adds	r2, #4
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	1d1a      	adds	r2, r3, #4
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4a26      	ldr	r2, [pc, #152]	; (8003fdc <xTaskIncrementTick+0x21c>)
 8003f44:	441a      	add	r2, r3
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	615a      	str	r2, [r3, #20]
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4e:	4923      	ldr	r1, [pc, #140]	; (8003fdc <xTaskIncrementTick+0x21c>)
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	1c59      	adds	r1, r3, #1
 8003f5e:	481f      	ldr	r0, [pc, #124]	; (8003fdc <xTaskIncrementTick+0x21c>)
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4403      	add	r3, r0
 8003f6a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f70:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <xTaskIncrementTick+0x220>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	429a      	cmp	r2, r3
 8003f78:	f67f af5d 	bls.w	8003e36 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f80:	e759      	b.n	8003e36 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f82:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <xTaskIncrementTick+0x220>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f88:	4914      	ldr	r1, [pc, #80]	; (8003fdc <xTaskIncrementTick+0x21c>)
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d901      	bls.n	8003f9e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <xTaskIncrementTick+0x224>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003faa:	e004      	b.n	8003fb6 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <xTaskIncrementTick+0x228>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	4a0d      	ldr	r2, [pc, #52]	; (8003fe8 <xTaskIncrementTick+0x228>)
 8003fb4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3728      	adds	r7, #40	; 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000264 	.word	0x20000264
 8003fc4:	20000240 	.word	0x20000240
 8003fc8:	200001f4 	.word	0x200001f4
 8003fcc:	200001f8 	.word	0x200001f8
 8003fd0:	20000254 	.word	0x20000254
 8003fd4:	2000025c 	.word	0x2000025c
 8003fd8:	20000244 	.word	0x20000244
 8003fdc:	20000168 	.word	0x20000168
 8003fe0:	20000164 	.word	0x20000164
 8003fe4:	20000250 	.word	0x20000250
 8003fe8:	2000024c 	.word	0x2000024c

08003fec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ff2:	4b27      	ldr	r3, [pc, #156]	; (8004090 <vTaskSwitchContext+0xa4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003ffa:	4b26      	ldr	r3, [pc, #152]	; (8004094 <vTaskSwitchContext+0xa8>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004000:	e03f      	b.n	8004082 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <vTaskSwitchContext+0xa8>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004008:	4b23      	ldr	r3, [pc, #140]	; (8004098 <vTaskSwitchContext+0xac>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	fab3 f383 	clz	r3, r3
 8004014:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004016:	7afb      	ldrb	r3, [r7, #11]
 8004018:	f1c3 031f 	rsb	r3, r3, #31
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	491f      	ldr	r1, [pc, #124]	; (800409c <vTaskSwitchContext+0xb0>)
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	607b      	str	r3, [r7, #4]
    }
 8004044:	bf00      	nop
 8004046:	e7fe      	b.n	8004046 <vTaskSwitchContext+0x5a>
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <vTaskSwitchContext+0xb0>)
 8004054:	4413      	add	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	3308      	adds	r3, #8
 800406a:	429a      	cmp	r2, r3
 800406c:	d104      	bne.n	8004078 <vTaskSwitchContext+0x8c>
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	605a      	str	r2, [r3, #4]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <vTaskSwitchContext+0xb4>)
 8004080:	6013      	str	r3, [r2, #0]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20000264 	.word	0x20000264
 8004094:	20000250 	.word	0x20000250
 8004098:	20000244 	.word	0x20000244
 800409c:	20000168 	.word	0x20000168
 80040a0:	20000164 	.word	0x20000164

080040a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	60fb      	str	r3, [r7, #12]
    }
 80040c6:	bf00      	nop
 80040c8:	e7fe      	b.n	80040c8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <vTaskPlaceOnEventList+0x44>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3318      	adds	r3, #24
 80040d0:	4619      	mov	r1, r3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fe fd39 	bl	8002b4a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040d8:	2101      	movs	r1, #1
 80040da:	6838      	ldr	r0, [r7, #0]
 80040dc:	f000 fdf6 	bl	8004ccc <prvAddCurrentTaskToDelayedList>
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000164 	.word	0x20000164

080040ec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	613b      	str	r3, [r7, #16]
    }
 8004110:	bf00      	nop
 8004112:	e7fe      	b.n	8004112 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <vTaskPlaceOnEventListRestricted+0x88>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	61da      	str	r2, [r3, #28]
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <vTaskPlaceOnEventListRestricted+0x88>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	6892      	ldr	r2, [r2, #8]
 800412a:	621a      	str	r2, [r3, #32]
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <vTaskPlaceOnEventListRestricted+0x88>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	3218      	adds	r2, #24
 8004136:	605a      	str	r2, [r3, #4]
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <vTaskPlaceOnEventListRestricted+0x88>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f103 0218 	add.w	r2, r3, #24
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <vTaskPlaceOnEventListRestricted+0x88>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	629a      	str	r2, [r3, #40]	; 0x28
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	68b8      	ldr	r0, [r7, #8]
 8004166:	f000 fdb1 	bl	8004ccc <prvAddCurrentTaskToDelayedList>
    }
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000164 	.word	0x20000164

08004178 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004178:	b480      	push	{r7}
 800417a:	b08b      	sub	sp, #44	; 0x2c
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	60fb      	str	r3, [r7, #12]
    }
 80041a0:	bf00      	nop
 80041a2:	e7fe      	b.n	80041a2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	6a3a      	ldr	r2, [r7, #32]
 80041b0:	6a12      	ldr	r2, [r2, #32]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	69d2      	ldr	r2, [r2, #28]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	3318      	adds	r3, #24
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d103      	bne.n	80041d2 <xTaskRemoveFromEventList+0x5a>
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	6a1a      	ldr	r2, [r3, #32]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	2200      	movs	r2, #0
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	1e5a      	subs	r2, r3, #1
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041e2:	4b4a      	ldr	r3, [pc, #296]	; (800430c <xTaskRemoveFromEventList+0x194>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d15e      	bne.n	80042a8 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	6a3a      	ldr	r2, [r7, #32]
 80041f6:	68d2      	ldr	r2, [r2, #12]
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	6a3a      	ldr	r2, [r7, #32]
 8004200:	6892      	ldr	r2, [r2, #8]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	3304      	adds	r3, #4
 800420c:	429a      	cmp	r2, r3
 800420e:	d103      	bne.n	8004218 <xTaskRemoveFromEventList+0xa0>
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	2200      	movs	r2, #0
 800421c:	615a      	str	r2, [r3, #20]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	1e5a      	subs	r2, r3, #1
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	2201      	movs	r2, #1
 800422e:	409a      	lsls	r2, r3
 8004230:	4b37      	ldr	r3, [pc, #220]	; (8004310 <xTaskRemoveFromEventList+0x198>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4313      	orrs	r3, r2
 8004236:	4a36      	ldr	r2, [pc, #216]	; (8004310 <xTaskRemoveFromEventList+0x198>)
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423e:	4935      	ldr	r1, [pc, #212]	; (8004314 <xTaskRemoveFromEventList+0x19c>)
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	3304      	adds	r3, #4
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	609a      	str	r2, [r3, #8]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	6a3a      	ldr	r2, [r7, #32]
 8004264:	3204      	adds	r2, #4
 8004266:	605a      	str	r2, [r3, #4]
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	1d1a      	adds	r2, r3, #4
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4a25      	ldr	r2, [pc, #148]	; (8004314 <xTaskRemoveFromEventList+0x19c>)
 800427e:	441a      	add	r2, r3
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	615a      	str	r2, [r3, #20]
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004288:	4922      	ldr	r1, [pc, #136]	; (8004314 <xTaskRemoveFromEventList+0x19c>)
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	1c59      	adds	r1, r3, #1
 8004298:	481e      	ldr	r0, [pc, #120]	; (8004314 <xTaskRemoveFromEventList+0x19c>)
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4403      	add	r3, r0
 80042a4:	6019      	str	r1, [r3, #0]
 80042a6:	e01b      	b.n	80042e0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042a8:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <xTaskRemoveFromEventList+0x1a0>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	61bb      	str	r3, [r7, #24]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	61da      	str	r2, [r3, #28]
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	621a      	str	r2, [r3, #32]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	3218      	adds	r2, #24
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f103 0218 	add.w	r2, r3, #24
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	4a11      	ldr	r2, [pc, #68]	; (8004318 <xTaskRemoveFromEventList+0x1a0>)
 80042d4:	629a      	str	r2, [r3, #40]	; 0x28
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <xTaskRemoveFromEventList+0x1a0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3301      	adds	r3, #1
 80042dc:	4a0e      	ldr	r2, [pc, #56]	; (8004318 <xTaskRemoveFromEventList+0x1a0>)
 80042de:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e4:	4b0d      	ldr	r3, [pc, #52]	; (800431c <xTaskRemoveFromEventList+0x1a4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d905      	bls.n	80042fa <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80042ee:	2301      	movs	r3, #1
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <xTaskRemoveFromEventList+0x1a8>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e001      	b.n	80042fe <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004300:	4618      	mov	r0, r3
 8004302:	372c      	adds	r7, #44	; 0x2c
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	20000264 	.word	0x20000264
 8004310:	20000244 	.word	0x20000244
 8004314:	20000168 	.word	0x20000168
 8004318:	200001fc 	.word	0x200001fc
 800431c:	20000164 	.word	0x20000164
 8004320:	20000250 	.word	0x20000250

08004324 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <vTaskInternalSetTimeOutState+0x24>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <vTaskInternalSetTimeOutState+0x28>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	605a      	str	r2, [r3, #4]
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	20000254 	.word	0x20000254
 800434c:	20000240 	.word	0x20000240

08004350 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	613b      	str	r3, [r7, #16]
    }
 8004372:	bf00      	nop
 8004374:	e7fe      	b.n	8004374 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60fb      	str	r3, [r7, #12]
    }
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004392:	f001 f8d1 	bl	8005538 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004396:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <xTaskCheckForTimeOut+0xc4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d102      	bne.n	80043b6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	e026      	b.n	8004404 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4b17      	ldr	r3, [pc, #92]	; (8004418 <xTaskCheckForTimeOut+0xc8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d00a      	beq.n	80043d8 <xTaskCheckForTimeOut+0x88>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d305      	bcc.n	80043d8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80043cc:	2301      	movs	r3, #1
 80043ce:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e015      	b.n	8004404 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d20b      	bcs.n	80043fa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	1ad2      	subs	r2, r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff ff98 	bl	8004324 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	e004      	b.n	8004404 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004400:	2301      	movs	r3, #1
 8004402:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004404:	f001 f8c8 	bl	8005598 <vPortExitCritical>

    return xReturn;
 8004408:	69fb      	ldr	r3, [r7, #28]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000240 	.word	0x20000240
 8004418:	20000254 	.word	0x20000254

0800441c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <vTaskMissedYield+0x14>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]
}
 8004426:	bf00      	nop
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	20000250 	.word	0x20000250

08004434 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800443c:	f000 f852 	bl	80044e4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <prvIdleTask+0x28>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d9f9      	bls.n	800443c <prvIdleTask+0x8>
            {
                taskYIELD();
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <prvIdleTask+0x2c>)
 800444a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004458:	e7f0      	b.n	800443c <prvIdleTask+0x8>
 800445a:	bf00      	nop
 800445c:	20000168 	.word	0x20000168
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	e00c      	b.n	800448a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4a12      	ldr	r2, [pc, #72]	; (80044c4 <prvInitialiseTaskLists+0x60>)
 800447c:	4413      	add	r3, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe fb36 	bl	8002af0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3301      	adds	r3, #1
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d9ef      	bls.n	8004470 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004490:	480d      	ldr	r0, [pc, #52]	; (80044c8 <prvInitialiseTaskLists+0x64>)
 8004492:	f7fe fb2d 	bl	8002af0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004496:	480d      	ldr	r0, [pc, #52]	; (80044cc <prvInitialiseTaskLists+0x68>)
 8004498:	f7fe fb2a 	bl	8002af0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800449c:	480c      	ldr	r0, [pc, #48]	; (80044d0 <prvInitialiseTaskLists+0x6c>)
 800449e:	f7fe fb27 	bl	8002af0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80044a2:	480c      	ldr	r0, [pc, #48]	; (80044d4 <prvInitialiseTaskLists+0x70>)
 80044a4:	f7fe fb24 	bl	8002af0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80044a8:	480b      	ldr	r0, [pc, #44]	; (80044d8 <prvInitialiseTaskLists+0x74>)
 80044aa:	f7fe fb21 	bl	8002af0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <prvInitialiseTaskLists+0x78>)
 80044b0:	4a05      	ldr	r2, [pc, #20]	; (80044c8 <prvInitialiseTaskLists+0x64>)
 80044b2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <prvInitialiseTaskLists+0x7c>)
 80044b6:	4a05      	ldr	r2, [pc, #20]	; (80044cc <prvInitialiseTaskLists+0x68>)
 80044b8:	601a      	str	r2, [r3, #0]
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000168 	.word	0x20000168
 80044c8:	200001cc 	.word	0x200001cc
 80044cc:	200001e0 	.word	0x200001e0
 80044d0:	200001fc 	.word	0x200001fc
 80044d4:	20000210 	.word	0x20000210
 80044d8:	20000228 	.word	0x20000228
 80044dc:	200001f4 	.word	0x200001f4
 80044e0:	200001f8 	.word	0x200001f8

080044e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ea:	e019      	b.n	8004520 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80044ec:	f001 f824 	bl	8005538 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044f0:	4b10      	ldr	r3, [pc, #64]	; (8004534 <prvCheckTasksWaitingTermination+0x50>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe fb5d 	bl	8002bbc <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004502:	4b0d      	ldr	r3, [pc, #52]	; (8004538 <prvCheckTasksWaitingTermination+0x54>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3b01      	subs	r3, #1
 8004508:	4a0b      	ldr	r2, [pc, #44]	; (8004538 <prvCheckTasksWaitingTermination+0x54>)
 800450a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <prvCheckTasksWaitingTermination+0x58>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3b01      	subs	r3, #1
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <prvCheckTasksWaitingTermination+0x58>)
 8004514:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8004516:	f001 f83f 	bl	8005598 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f810 	bl	8004540 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <prvCheckTasksWaitingTermination+0x58>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e1      	bne.n	80044ec <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004528:	bf00      	nop
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000210 	.word	0x20000210
 8004538:	2000023c 	.word	0x2000023c
 800453c:	20000224 	.word	0x20000224

08004540 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	4618      	mov	r0, r3
 800454e:	f001 f9cf 	bl	80058f0 <vPortFree>
            vPortFree( pxTCB );
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f001 f9cc 	bl	80058f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <prvResetNextTaskUnblockTime+0x30>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d104      	bne.n	8004578 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <prvResetNextTaskUnblockTime+0x34>)
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004576:	e005      	b.n	8004584 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <prvResetNextTaskUnblockTime+0x30>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a04      	ldr	r2, [pc, #16]	; (8004594 <prvResetNextTaskUnblockTime+0x34>)
 8004582:	6013      	str	r3, [r2, #0]
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	200001f4 	.word	0x200001f4
 8004594:	2000025c 	.word	0x2000025c

08004598 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800459e:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <xTaskGetSchedulerState+0x34>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80045a6:	2301      	movs	r3, #1
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	e008      	b.n	80045be <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ac:	4b08      	ldr	r3, [pc, #32]	; (80045d0 <xTaskGetSchedulerState+0x38>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d102      	bne.n	80045ba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80045b4:	2302      	movs	r3, #2
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	e001      	b.n	80045be <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80045ba:	2300      	movs	r3, #0
 80045bc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80045be:	687b      	ldr	r3, [r7, #4]
    }
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	20000248 	.word	0x20000248
 80045d0:	20000264 	.word	0x20000264

080045d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8087 	beq.w	80046fa <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f0:	4b44      	ldr	r3, [pc, #272]	; (8004704 <xTaskPriorityInherit+0x130>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d276      	bcs.n	80046e8 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	db06      	blt.n	8004610 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004602:	4b40      	ldr	r3, [pc, #256]	; (8004704 <xTaskPriorityInherit+0x130>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	f1c3 0205 	rsb	r2, r3, #5
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	6959      	ldr	r1, [r3, #20]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4a39      	ldr	r2, [pc, #228]	; (8004708 <xTaskPriorityInherit+0x134>)
 8004622:	4413      	add	r3, r2
 8004624:	4299      	cmp	r1, r3
 8004626:	d157      	bne.n	80046d8 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	3304      	adds	r3, #4
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fac5 	bl	8002bbc <uxListRemove>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	2201      	movs	r2, #1
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43da      	mvns	r2, r3
 8004644:	4b31      	ldr	r3, [pc, #196]	; (800470c <xTaskPriorityInherit+0x138>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4013      	ands	r3, r2
 800464a:	4a30      	ldr	r2, [pc, #192]	; (800470c <xTaskPriorityInherit+0x138>)
 800464c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800464e:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <xTaskPriorityInherit+0x130>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	2201      	movs	r2, #1
 800465e:	409a      	lsls	r2, r3
 8004660:	4b2a      	ldr	r3, [pc, #168]	; (800470c <xTaskPriorityInherit+0x138>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4313      	orrs	r3, r2
 8004666:	4a29      	ldr	r2, [pc, #164]	; (800470c <xTaskPriorityInherit+0x138>)
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466e:	4926      	ldr	r1, [pc, #152]	; (8004708 <xTaskPriorityInherit+0x134>)
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	3304      	adds	r3, #4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	609a      	str	r2, [r3, #8]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	60da      	str	r2, [r3, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	3204      	adds	r2, #4
 8004696:	605a      	str	r2, [r3, #4]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1d1a      	adds	r2, r3, #4
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4a16      	ldr	r2, [pc, #88]	; (8004708 <xTaskPriorityInherit+0x134>)
 80046ae:	441a      	add	r2, r3
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	615a      	str	r2, [r3, #20]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b8:	4913      	ldr	r1, [pc, #76]	; (8004708 <xTaskPriorityInherit+0x134>)
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	1c59      	adds	r1, r3, #1
 80046c8:	480f      	ldr	r0, [pc, #60]	; (8004708 <xTaskPriorityInherit+0x134>)
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4403      	add	r3, r0
 80046d4:	6019      	str	r1, [r3, #0]
 80046d6:	e004      	b.n	80046e2 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <xTaskPriorityInherit+0x130>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80046e2:	2301      	movs	r3, #1
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e008      	b.n	80046fa <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <xTaskPriorityInherit+0x130>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d201      	bcs.n	80046fa <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80046fa:	697b      	ldr	r3, [r7, #20]
    }
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	20000164 	.word	0x20000164
 8004708:	20000168 	.word	0x20000168
 800470c:	20000244 	.word	0x20000244

08004710 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004710:	b580      	push	{r7, lr}
 8004712:	b088      	sub	sp, #32
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800471c:	2300      	movs	r3, #0
 800471e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 808c 	beq.w	8004840 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004728:	4b48      	ldr	r3, [pc, #288]	; (800484c <xTaskPriorityDisinherit+0x13c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	429a      	cmp	r2, r3
 8004730:	d00a      	beq.n	8004748 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	613b      	str	r3, [r7, #16]
    }
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	60fb      	str	r3, [r7, #12]
    }
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	1e5a      	subs	r2, r3, #1
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004778:	429a      	cmp	r2, r3
 800477a:	d061      	beq.n	8004840 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d15d      	bne.n	8004840 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	3304      	adds	r3, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe fa17 	bl	8002bbc <uxListRemove>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	2201      	movs	r2, #1
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	4b2b      	ldr	r3, [pc, #172]	; (8004850 <xTaskPriorityDisinherit+0x140>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4013      	ands	r3, r2
 80047a6:	4a2a      	ldr	r2, [pc, #168]	; (8004850 <xTaskPriorityDisinherit+0x140>)
 80047a8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	f1c3 0205 	rsb	r2, r3, #5
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	2201      	movs	r2, #1
 80047c4:	409a      	lsls	r2, r3
 80047c6:	4b22      	ldr	r3, [pc, #136]	; (8004850 <xTaskPriorityDisinherit+0x140>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	4a20      	ldr	r2, [pc, #128]	; (8004850 <xTaskPriorityDisinherit+0x140>)
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d4:	491f      	ldr	r1, [pc, #124]	; (8004854 <xTaskPriorityDisinherit+0x144>)
 80047d6:	4613      	mov	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	3304      	adds	r3, #4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	60da      	str	r2, [r3, #12]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	3204      	adds	r2, #4
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	1d1a      	adds	r2, r3, #4
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	609a      	str	r2, [r3, #8]
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4a10      	ldr	r2, [pc, #64]	; (8004854 <xTaskPriorityDisinherit+0x144>)
 8004814:	441a      	add	r2, r3
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	615a      	str	r2, [r3, #20]
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	490d      	ldr	r1, [pc, #52]	; (8004854 <xTaskPriorityDisinherit+0x144>)
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	1c59      	adds	r1, r3, #1
 800482e:	4809      	ldr	r0, [pc, #36]	; (8004854 <xTaskPriorityDisinherit+0x144>)
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4403      	add	r3, r0
 800483a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800483c:	2301      	movs	r3, #1
 800483e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004840:	69fb      	ldr	r3, [r7, #28]
    }
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20000164 	.word	0x20000164
 8004850:	20000244 	.word	0x20000244
 8004854:	20000168 	.word	0x20000168

08004858 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004866:	2301      	movs	r3, #1
 8004868:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80a1 	beq.w	80049b4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10a      	bne.n	8004890 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	613b      	str	r3, [r7, #16]
    }
 800488c:	bf00      	nop
 800488e:	e7fe      	b.n	800488e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d902      	bls.n	80048a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
 800489e:	e002      	b.n	80048a6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ac:	429a      	cmp	r2, r3
 80048ae:	f000 8081 	beq.w	80049b4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d17b      	bne.n	80049b4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80048bc:	4b3f      	ldr	r3, [pc, #252]	; (80049bc <vTaskPriorityDisinheritAfterTimeout+0x164>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a3a      	ldr	r2, [r7, #32]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d10a      	bne.n	80048dc <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	60fb      	str	r3, [r7, #12]
    }
 80048d8:	bf00      	nop
 80048da:	e7fe      	b.n	80048da <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	db04      	blt.n	80048fa <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	f1c3 0205 	rsb	r2, r3, #5
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	6959      	ldr	r1, [r3, #20]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4a2d      	ldr	r2, [pc, #180]	; (80049c0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800490a:	4413      	add	r3, r2
 800490c:	4299      	cmp	r1, r3
 800490e:	d151      	bne.n	80049b4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	3304      	adds	r3, #4
 8004914:	4618      	mov	r0, r3
 8004916:	f7fe f951 	bl	8002bbc <uxListRemove>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10a      	bne.n	8004936 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	2201      	movs	r2, #1
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43da      	mvns	r2, r3
 800492c:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4013      	ands	r3, r2
 8004932:	4a24      	ldr	r2, [pc, #144]	; (80049c4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004934:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	2201      	movs	r2, #1
 800493c:	409a      	lsls	r2, r3
 800493e:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	4a1f      	ldr	r2, [pc, #124]	; (80049c4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	491c      	ldr	r1, [pc, #112]	; (80049c0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	3304      	adds	r3, #4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	60da      	str	r2, [r3, #12]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	3204      	adds	r2, #4
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	1d1a      	adds	r2, r3, #4
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	609a      	str	r2, [r3, #8]
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4a0d      	ldr	r2, [pc, #52]	; (80049c0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800498c:	441a      	add	r2, r3
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	615a      	str	r2, [r3, #20]
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004996:	490a      	ldr	r1, [pc, #40]	; (80049c0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	1c59      	adds	r1, r3, #1
 80049a6:	4806      	ldr	r0, [pc, #24]	; (80049c0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80049a8:	4613      	mov	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4403      	add	r3, r0
 80049b2:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80049b4:	bf00      	nop
 80049b6:	3728      	adds	r7, #40	; 0x28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	20000164 	.word	0x20000164
 80049c0:	20000168 	.word	0x20000168
 80049c4:	20000244 	.word	0x20000244

080049c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80049cc:	4b07      	ldr	r3, [pc, #28]	; (80049ec <pvTaskIncrementMutexHeldCount+0x24>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <pvTaskIncrementMutexHeldCount+0x24>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049da:	3201      	adds	r2, #1
 80049dc:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80049de:	4b03      	ldr	r3, [pc, #12]	; (80049ec <pvTaskIncrementMutexHeldCount+0x24>)
 80049e0:	681b      	ldr	r3, [r3, #0]
    }
 80049e2:	4618      	mov	r0, r3
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	20000164 	.word	0x20000164

080049f0 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	613b      	str	r3, [r7, #16]
    }
 8004a14:	bf00      	nop
 8004a16:	e7fe      	b.n	8004a16 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 8004a18:	f000 fd8e 	bl	8005538 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8004a1c:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <ulTaskGenericNotifyTake+0xc8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	3214      	adds	r2, #20
 8004a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d115      	bne.n	8004a58 <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004a2c:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <ulTaskGenericNotifyTake+0xc8>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4413      	add	r3, r2
 8004a34:	3354      	adds	r3, #84	; 0x54
 8004a36:	2201      	movs	r2, #1
 8004a38:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00b      	beq.n	8004a58 <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a40:	2101      	movs	r1, #1
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f942 	bl	8004ccc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004a48:	4b1c      	ldr	r3, [pc, #112]	; (8004abc <ulTaskGenericNotifyTake+0xcc>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004a58:	f000 fd9e 	bl	8005598 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004a5c:	f000 fd6c 	bl	8005538 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWait );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004a60:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <ulTaskGenericNotifyTake+0xc8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	3214      	adds	r2, #20
 8004a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a6c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d012      	beq.n	8004a9a <ulTaskGenericNotifyTake+0xaa>
            {
                if( xClearCountOnExit != pdFALSE )
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <ulTaskGenericNotifyTake+0x9a>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <ulTaskGenericNotifyTake+0xc8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	3214      	adds	r2, #20
 8004a82:	2100      	movs	r1, #0
 8004a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004a88:	e007      	b.n	8004a9a <ulTaskGenericNotifyTake+0xaa>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8004a8a:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <ulTaskGenericNotifyTake+0xc8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	1e51      	subs	r1, r2, #1
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	3214      	adds	r2, #20
 8004a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <ulTaskGenericNotifyTake+0xc8>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3354      	adds	r3, #84	; 0x54
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004aa8:	f000 fd76 	bl	8005598 <vPortExitCritical>

        return ulReturn;
 8004aac:	697b      	ldr	r3, [r7, #20]
    }
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000164 	.word	0x20000164
 8004abc:	e000ed04 	.word	0xe000ed04

08004ac0 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b090      	sub	sp, #64	; 0x40
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <vTaskGenericNotifyGiveFromISR+0x28>
        __asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004ae4:	bf00      	nop
 8004ae6:	e7fe      	b.n	8004ae6 <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <vTaskGenericNotifyGiveFromISR+0x44>
        __asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	623b      	str	r3, [r7, #32]
    }
 8004b00:	bf00      	nop
 8004b02:	e7fe      	b.n	8004b02 <vTaskGenericNotifyGiveFromISR+0x42>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b04:	f000 fdfa 	bl	80056fc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        __asm volatile
 8004b0c:	f3ef 8211 	mrs	r2, BASEPRI
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	61fa      	str	r2, [r7, #28]
 8004b22:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8004b24:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b26:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3354      	adds	r3, #84	; 0x54
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004b36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3354      	adds	r3, #84	; 0x54
 8004b3e:	2202      	movs	r2, #2
 8004b40:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	3214      	adds	r2, #20
 8004b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b4c:	1c59      	adds	r1, r3, #1
 8004b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	3214      	adds	r2, #20
 8004b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004b58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	f040 809e 	bne.w	8004c9e <vTaskGenericNotifyGiveFromISR+0x1de>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <vTaskGenericNotifyGiveFromISR+0xc0>
        __asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	617b      	str	r3, [r7, #20]
    }
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <vTaskGenericNotifyGiveFromISR+0xbe>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b80:	4b4c      	ldr	r3, [pc, #304]	; (8004cb4 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d15e      	bne.n	8004c46 <vTaskGenericNotifyGiveFromISR+0x186>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b94:	68d2      	ldr	r2, [r2, #12]
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b9e:	6892      	ldr	r2, [r2, #8]
 8004ba0:	605a      	str	r2, [r3, #4]
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba8:	3304      	adds	r3, #4
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d103      	bne.n	8004bb6 <vTaskGenericNotifyGiveFromISR+0xf6>
 8004bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb0:	68da      	ldr	r2, [r3, #12]
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	605a      	str	r2, [r3, #4]
 8004bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb8:	2200      	movs	r2, #0
 8004bba:	615a      	str	r2, [r3, #20]
 8004bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	1e5a      	subs	r2, r3, #1
 8004bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	2201      	movs	r2, #1
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	4b3a      	ldr	r3, [pc, #232]	; (8004cb8 <vTaskGenericNotifyGiveFromISR+0x1f8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	4a38      	ldr	r2, [pc, #224]	; (8004cb8 <vTaskGenericNotifyGiveFromISR+0x1f8>)
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bdc:	4937      	ldr	r1, [pc, #220]	; (8004cbc <vTaskGenericNotifyGiveFromISR+0x1fc>)
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	3304      	adds	r3, #4
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfa:	60da      	str	r2, [r3, #12]
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c02:	3204      	adds	r2, #4
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c08:	1d1a      	adds	r2, r3, #4
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	609a      	str	r2, [r3, #8]
 8004c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4a28      	ldr	r2, [pc, #160]	; (8004cbc <vTaskGenericNotifyGiveFromISR+0x1fc>)
 8004c1c:	441a      	add	r2, r3
 8004c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c20:	615a      	str	r2, [r3, #20]
 8004c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c26:	4925      	ldr	r1, [pc, #148]	; (8004cbc <vTaskGenericNotifyGiveFromISR+0x1fc>)
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1c59      	adds	r1, r3, #1
 8004c36:	4821      	ldr	r0, [pc, #132]	; (8004cbc <vTaskGenericNotifyGiveFromISR+0x1fc>)
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4403      	add	r3, r0
 8004c42:	6019      	str	r1, [r3, #0]
 8004c44:	e01b      	b.n	8004c7e <vTaskGenericNotifyGiveFromISR+0x1be>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004c46:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <vTaskGenericNotifyGiveFromISR+0x200>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c50:	61da      	str	r2, [r3, #28]
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c58:	621a      	str	r2, [r3, #32]
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c60:	3218      	adds	r2, #24
 8004c62:	605a      	str	r2, [r3, #4]
 8004c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c66:	f103 0218 	add.w	r2, r3, #24
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	609a      	str	r2, [r3, #8]
 8004c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c70:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <vTaskGenericNotifyGiveFromISR+0x200>)
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28
 8004c74:	4b12      	ldr	r3, [pc, #72]	; (8004cc0 <vTaskGenericNotifyGiveFromISR+0x200>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	4a11      	ldr	r2, [pc, #68]	; (8004cc0 <vTaskGenericNotifyGiveFromISR+0x200>)
 8004c7c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c82:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <vTaskGenericNotifyGiveFromISR+0x204>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d908      	bls.n	8004c9e <vTaskGenericNotifyGiveFromISR+0x1de>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <vTaskGenericNotifyGiveFromISR+0x1d8>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <vTaskGenericNotifyGiveFromISR+0x208>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	613b      	str	r3, [r7, #16]
        __asm volatile
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f383 8811 	msr	BASEPRI, r3
    }
 8004ca8:	bf00      	nop
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
 8004caa:	bf00      	nop
 8004cac:	3740      	adds	r7, #64	; 0x40
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000264 	.word	0x20000264
 8004cb8:	20000244 	.word	0x20000244
 8004cbc:	20000168 	.word	0x20000168
 8004cc0:	200001fc 	.word	0x200001fc
 8004cc4:	20000164 	.word	0x20000164
 8004cc8:	20000250 	.word	0x20000250

08004ccc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cdc:	4b35      	ldr	r3, [pc, #212]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fd ff6a 	bl	8002bbc <uxListRemove>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10b      	bne.n	8004d06 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004cee:	4b31      	ldr	r3, [pc, #196]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xec>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4013      	ands	r3, r2
 8004d02:	4a2d      	ldr	r2, [pc, #180]	; (8004db8 <prvAddCurrentTaskToDelayedList+0xec>)
 8004d04:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0c:	d124      	bne.n	8004d58 <prvAddCurrentTaskToDelayedList+0x8c>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d021      	beq.n	8004d58 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d14:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	609a      	str	r2, [r3, #8]
 8004d22:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	6892      	ldr	r2, [r2, #8]
 8004d2a:	60da      	str	r2, [r3, #12]
 8004d2c:	4b21      	ldr	r3, [pc, #132]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	3204      	adds	r2, #4
 8004d36:	605a      	str	r2, [r3, #4]
 8004d38:	4b1e      	ldr	r3, [pc, #120]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	1d1a      	adds	r2, r3, #4
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	609a      	str	r2, [r3, #8]
 8004d42:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004d48:	615a      	str	r2, [r3, #20]
 8004d4a:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	4a1a      	ldr	r2, [pc, #104]	; (8004dbc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004d56:	e026      	b.n	8004da6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d60:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d209      	bcs.n	8004d84 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d70:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f7fd fee4 	bl	8002b4a <vListInsert>
}
 8004d82:	e010      	b.n	8004da6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d84:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fd feda 	bl	8002b4a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004d96:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d202      	bcs.n	8004da6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004da0:	4a09      	ldr	r2, [pc, #36]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6013      	str	r3, [r2, #0]
}
 8004da6:	bf00      	nop
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000240 	.word	0x20000240
 8004db4:	20000164 	.word	0x20000164
 8004db8:	20000244 	.word	0x20000244
 8004dbc:	20000228 	.word	0x20000228
 8004dc0:	200001f8 	.word	0x200001f8
 8004dc4:	200001f4 	.word	0x200001f4
 8004dc8:	2000025c 	.word	0x2000025c

08004dcc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004dd6:	f000 fa47 	bl	8005268 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004dda:	4b11      	ldr	r3, [pc, #68]	; (8004e20 <xTimerCreateTimerTask+0x54>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004de2:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <xTimerCreateTimerTask+0x58>)
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	2302      	movs	r3, #2
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	2300      	movs	r3, #0
 8004dec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004df0:	490d      	ldr	r1, [pc, #52]	; (8004e28 <xTimerCreateTimerTask+0x5c>)
 8004df2:	480e      	ldr	r0, [pc, #56]	; (8004e2c <xTimerCreateTimerTask+0x60>)
 8004df4:	f7fe fd02 	bl	80037fc <xTaskCreate>
 8004df8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10a      	bne.n	8004e16 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	603b      	str	r3, [r7, #0]
    }
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004e16:	687b      	ldr	r3, [r7, #4]
    }
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20000298 	.word	0x20000298
 8004e24:	2000029c 	.word	0x2000029c
 8004e28:	08006518 	.word	0x08006518
 8004e2c:	08004ed5 	.word	0x08004ed5

08004e30 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004e3c:	e008      	b.n	8004e50 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	4413      	add	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	18d1      	adds	r1, r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f8dd 	bl	800501c <prvInsertTimerInActiveList>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1ea      	bne.n	8004e3e <prvReloadTimer+0xe>
        }
    }
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <prvProcessExpiredTimer+0x5c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fd fe95 	bl	8002bbc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff ffc3 	bl	8004e30 <prvReloadTimer>
 8004eaa:	e008      	b.n	8004ebe <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eb2:	f023 0301 	bic.w	r3, r3, #1
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	4798      	blx	r3
    }
 8004ec6:	bf00      	nop
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000290 	.word	0x20000290

08004ed4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004edc:	f107 0308 	add.w	r3, r7, #8
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f857 	bl	8004f94 <prvGetNextExpireTime>
 8004ee6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4619      	mov	r1, r3
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f803 	bl	8004ef8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004ef2:	f000 f8d5 	bl	80050a0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ef6:	e7f1      	b.n	8004edc <prvTimerTask+0x8>

08004ef8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004f02:	f7fe fe37 	bl	8003b74 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f06:	f107 0308 	add.w	r3, r7, #8
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f866 	bl	8004fdc <prvSampleTimeNow>
 8004f10:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d130      	bne.n	8004f7a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <prvProcessTimerOrBlockTask+0x3c>
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d806      	bhi.n	8004f34 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004f26:	f7fe fe33 	bl	8003b90 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f2a:	68f9      	ldr	r1, [r7, #12]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ffa1 	bl	8004e74 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004f32:	e024      	b.n	8004f7e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d008      	beq.n	8004f4c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f3a:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <prvProcessTimerOrBlockTask+0x90>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <prvProcessTimerOrBlockTask+0x50>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <prvProcessTimerOrBlockTask+0x52>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <prvProcessTimerOrBlockTask+0x94>)
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f7fe fc1b 	bl	8003794 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004f5e:	f7fe fe17 	bl	8003b90 <xTaskResumeAll>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004f68:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <prvProcessTimerOrBlockTask+0x98>)
 8004f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	f3bf 8f6f 	isb	sy
    }
 8004f78:	e001      	b.n	8004f7e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004f7a:	f7fe fe09 	bl	8003b90 <xTaskResumeAll>
    }
 8004f7e:	bf00      	nop
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000294 	.word	0x20000294
 8004f8c:	20000298 	.word	0x20000298
 8004f90:	e000ed04 	.word	0xe000ed04

08004f94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <prvGetNextExpireTime+0x44>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <prvGetNextExpireTime+0x16>
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	e000      	b.n	8004fac <prvGetNextExpireTime+0x18>
 8004faa:	2200      	movs	r2, #0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fb8:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <prvGetNextExpireTime+0x44>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	e001      	b.n	8004fc8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
    }
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000290 	.word	0x20000290

08004fdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004fe4:	f7fe fed0 	bl	8003d88 <xTaskGetTickCount>
 8004fe8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <prvSampleTimeNow+0x3c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d205      	bcs.n	8005000 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004ff4:	f000 f912 	bl	800521c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e002      	b.n	8005006 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005006:	4a04      	ldr	r2, [pc, #16]	; (8005018 <prvSampleTimeNow+0x3c>)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800500c:	68fb      	ldr	r3, [r7, #12]
    }
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	200002a0 	.word	0x200002a0

0800501c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d812      	bhi.n	8005068 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	1ad2      	subs	r2, r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	429a      	cmp	r2, r3
 800504e:	d302      	bcc.n	8005056 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005050:	2301      	movs	r3, #1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e01b      	b.n	800508e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <prvInsertTimerInActiveList+0x7c>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3304      	adds	r3, #4
 800505e:	4619      	mov	r1, r3
 8005060:	4610      	mov	r0, r2
 8005062:	f7fd fd72 	bl	8002b4a <vListInsert>
 8005066:	e012      	b.n	800508e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d206      	bcs.n	800507e <prvInsertTimerInActiveList+0x62>
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d302      	bcc.n	800507e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005078:	2301      	movs	r3, #1
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e007      	b.n	800508e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800507e:	4b07      	ldr	r3, [pc, #28]	; (800509c <prvInsertTimerInActiveList+0x80>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3304      	adds	r3, #4
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f7fd fd5e 	bl	8002b4a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800508e:	697b      	ldr	r3, [r7, #20]
    }
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000294 	.word	0x20000294
 800509c:	20000290 	.word	0x20000290

080050a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050a6:	e0a6      	b.n	80051f6 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f2c0 80a3 	blt.w	80051f6 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	3304      	adds	r3, #4
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fd fd7b 	bl	8002bbc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff ff87 	bl	8004fdc <prvSampleTimeNow>
 80050ce:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	f200 808d 	bhi.w	80051f4 <prvProcessReceivedCommands+0x154>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <prvProcessReceivedCommands+0x40>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	08005105 	.word	0x08005105
 80050e4:	08005105 	.word	0x08005105
 80050e8:	0800516d 	.word	0x0800516d
 80050ec:	08005181 	.word	0x08005181
 80050f0:	080051cb 	.word	0x080051cb
 80050f4:	08005105 	.word	0x08005105
 80050f8:	08005105 	.word	0x08005105
 80050fc:	0800516d 	.word	0x0800516d
 8005100:	08005181 	.word	0x08005181
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800510a:	f043 0301 	orr.w	r3, r3, #1
 800510e:	b2da      	uxtb	r2, r3
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	18d1      	adds	r1, r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	69f8      	ldr	r0, [r7, #28]
 8005124:	f7ff ff7a 	bl	800501c <prvInsertTimerInActiveList>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d063      	beq.n	80051f6 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	4413      	add	r3, r2
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4619      	mov	r1, r3
 8005148:	69f8      	ldr	r0, [r7, #28]
 800514a:	f7ff fe71 	bl	8004e30 <prvReloadTimer>
 800514e:	e008      	b.n	8005162 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	b2da      	uxtb	r2, r3
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	69f8      	ldr	r0, [r7, #28]
 8005168:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800516a:	e044      	b.n	80051f6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	b2da      	uxtb	r2, r3
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800517e:	e03a      	b.n	80051f6 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	b2da      	uxtb	r2, r3
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	617b      	str	r3, [r7, #20]
    }
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	18d1      	adds	r1, r2, r3
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	69f8      	ldr	r0, [r7, #28]
 80051c4:	f7ff ff2a 	bl	800501c <prvInsertTimerInActiveList>
                        break;
 80051c8:	e015      	b.n	80051f6 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d103      	bne.n	80051e0 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80051d8:	69f8      	ldr	r0, [r7, #28]
 80051da:	f000 fb89 	bl	80058f0 <vPortFree>
 80051de:	e00a      	b.n	80051f6 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80051f2:	e000      	b.n	80051f6 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80051f4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051f6:	4b08      	ldr	r3, [pc, #32]	; (8005218 <prvProcessReceivedCommands+0x178>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f107 0108 	add.w	r1, r7, #8
 80051fe:	2200      	movs	r2, #0
 8005200:	4618      	mov	r0, r3
 8005202:	f7fd ff8b 	bl	800311c <xQueueReceive>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	f47f af4d 	bne.w	80050a8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	3720      	adds	r7, #32
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000298 	.word	0x20000298

0800521c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005222:	e009      	b.n	8005238 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <prvSwitchTimerLists+0x44>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800522e:	f04f 31ff 	mov.w	r1, #4294967295
 8005232:	6838      	ldr	r0, [r7, #0]
 8005234:	f7ff fe1e 	bl	8004e74 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <prvSwitchTimerLists+0x44>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005242:	4b07      	ldr	r3, [pc, #28]	; (8005260 <prvSwitchTimerLists+0x44>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005248:	4b06      	ldr	r3, [pc, #24]	; (8005264 <prvSwitchTimerLists+0x48>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a04      	ldr	r2, [pc, #16]	; (8005260 <prvSwitchTimerLists+0x44>)
 800524e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005250:	4a04      	ldr	r2, [pc, #16]	; (8005264 <prvSwitchTimerLists+0x48>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6013      	str	r3, [r2, #0]
    }
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000290 	.word	0x20000290
 8005264:	20000294 	.word	0x20000294

08005268 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800526c:	f000 f964 	bl	8005538 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005270:	4b12      	ldr	r3, [pc, #72]	; (80052bc <prvCheckForValidListAndQueue+0x54>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11d      	bne.n	80052b4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005278:	4811      	ldr	r0, [pc, #68]	; (80052c0 <prvCheckForValidListAndQueue+0x58>)
 800527a:	f7fd fc39 	bl	8002af0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800527e:	4811      	ldr	r0, [pc, #68]	; (80052c4 <prvCheckForValidListAndQueue+0x5c>)
 8005280:	f7fd fc36 	bl	8002af0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005284:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <prvCheckForValidListAndQueue+0x60>)
 8005286:	4a0e      	ldr	r2, [pc, #56]	; (80052c0 <prvCheckForValidListAndQueue+0x58>)
 8005288:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800528a:	4b10      	ldr	r3, [pc, #64]	; (80052cc <prvCheckForValidListAndQueue+0x64>)
 800528c:	4a0d      	ldr	r2, [pc, #52]	; (80052c4 <prvCheckForValidListAndQueue+0x5c>)
 800528e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005290:	2200      	movs	r2, #0
 8005292:	210c      	movs	r1, #12
 8005294:	200a      	movs	r0, #10
 8005296:	f7fd fd4b 	bl	8002d30 <xQueueGenericCreate>
 800529a:	4603      	mov	r3, r0
 800529c:	4a07      	ldr	r2, [pc, #28]	; (80052bc <prvCheckForValidListAndQueue+0x54>)
 800529e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80052a0:	4b06      	ldr	r3, [pc, #24]	; (80052bc <prvCheckForValidListAndQueue+0x54>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <prvCheckForValidListAndQueue+0x54>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4908      	ldr	r1, [pc, #32]	; (80052d0 <prvCheckForValidListAndQueue+0x68>)
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe fa22 	bl	80036f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80052b4:	f000 f970 	bl	8005598 <vPortExitCritical>
    }
 80052b8:	bf00      	nop
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000298 	.word	0x20000298
 80052c0:	20000268 	.word	0x20000268
 80052c4:	2000027c 	.word	0x2000027c
 80052c8:	20000290 	.word	0x20000290
 80052cc:	20000294 	.word	0x20000294
 80052d0:	08006520 	.word	0x08006520

080052d4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3b04      	subs	r3, #4
 80052e4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3b04      	subs	r3, #4
 80052f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f023 0201 	bic.w	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3b04      	subs	r3, #4
 8005302:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005304:	4a0c      	ldr	r2, [pc, #48]	; (8005338 <pxPortInitialiseStack+0x64>)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3b14      	subs	r3, #20
 800530e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3b04      	subs	r3, #4
 800531a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f06f 0202 	mvn.w	r2, #2
 8005322:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3b20      	subs	r3, #32
 8005328:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800532a:	68fb      	ldr	r3, [r7, #12]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	0800533d 	.word	0x0800533d

0800533c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005346:	4b12      	ldr	r3, [pc, #72]	; (8005390 <prvTaskExitError+0x54>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d00a      	beq.n	8005366 <prvTaskExitError+0x2a>
        __asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	60fb      	str	r3, [r7, #12]
    }
 8005362:	bf00      	nop
 8005364:	e7fe      	b.n	8005364 <prvTaskExitError+0x28>
        __asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	60bb      	str	r3, [r7, #8]
    }
 8005378:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800537a:	bf00      	nop
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0fc      	beq.n	800537c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005382:	bf00      	nop
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	20000010 	.word	0x20000010
	...

080053a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80053a0:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <pxCurrentTCBConst2>)
 80053a2:	6819      	ldr	r1, [r3, #0]
 80053a4:	6808      	ldr	r0, [r1, #0]
 80053a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053aa:	f380 8809 	msr	PSP, r0
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f04f 0000 	mov.w	r0, #0
 80053b6:	f380 8811 	msr	BASEPRI, r0
 80053ba:	4770      	bx	lr
 80053bc:	f3af 8000 	nop.w

080053c0 <pxCurrentTCBConst2>:
 80053c0:	20000164 	.word	0x20000164
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop

080053c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80053c8:	4808      	ldr	r0, [pc, #32]	; (80053ec <prvPortStartFirstTask+0x24>)
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	6800      	ldr	r0, [r0, #0]
 80053ce:	f380 8808 	msr	MSP, r0
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8814 	msr	CONTROL, r0
 80053da:	b662      	cpsie	i
 80053dc:	b661      	cpsie	f
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	df00      	svc	0
 80053e8:	bf00      	nop
 80053ea:	0000      	.short	0x0000
 80053ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop

080053f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053fa:	4b46      	ldr	r3, [pc, #280]	; (8005514 <xPortStartScheduler+0x120>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a46      	ldr	r2, [pc, #280]	; (8005518 <xPortStartScheduler+0x124>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d10a      	bne.n	800541a <xPortStartScheduler+0x26>
        __asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	613b      	str	r3, [r7, #16]
    }
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800541a:	4b3e      	ldr	r3, [pc, #248]	; (8005514 <xPortStartScheduler+0x120>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a3f      	ldr	r2, [pc, #252]	; (800551c <xPortStartScheduler+0x128>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d10a      	bne.n	800543a <xPortStartScheduler+0x46>
        __asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	60fb      	str	r3, [r7, #12]
    }
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800543a:	4b39      	ldr	r3, [pc, #228]	; (8005520 <xPortStartScheduler+0x12c>)
 800543c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	22ff      	movs	r2, #255	; 0xff
 800544a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800545c:	b2da      	uxtb	r2, r3
 800545e:	4b31      	ldr	r3, [pc, #196]	; (8005524 <xPortStartScheduler+0x130>)
 8005460:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005462:	4b31      	ldr	r3, [pc, #196]	; (8005528 <xPortStartScheduler+0x134>)
 8005464:	2207      	movs	r2, #7
 8005466:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005468:	e009      	b.n	800547e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800546a:	4b2f      	ldr	r3, [pc, #188]	; (8005528 <xPortStartScheduler+0x134>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3b01      	subs	r3, #1
 8005470:	4a2d      	ldr	r2, [pc, #180]	; (8005528 <xPortStartScheduler+0x134>)
 8005472:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	b2db      	uxtb	r3, r3
 800547c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005486:	2b80      	cmp	r3, #128	; 0x80
 8005488:	d0ef      	beq.n	800546a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800548a:	4b27      	ldr	r3, [pc, #156]	; (8005528 <xPortStartScheduler+0x134>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f1c3 0307 	rsb	r3, r3, #7
 8005492:	2b04      	cmp	r3, #4
 8005494:	d00a      	beq.n	80054ac <xPortStartScheduler+0xb8>
        __asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	60bb      	str	r3, [r7, #8]
    }
 80054a8:	bf00      	nop
 80054aa:	e7fe      	b.n	80054aa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054ac:	4b1e      	ldr	r3, [pc, #120]	; (8005528 <xPortStartScheduler+0x134>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <xPortStartScheduler+0x134>)
 80054b4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054b6:	4b1c      	ldr	r3, [pc, #112]	; (8005528 <xPortStartScheduler+0x134>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054be:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <xPortStartScheduler+0x134>)
 80054c0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80054ca:	4b18      	ldr	r3, [pc, #96]	; (800552c <xPortStartScheduler+0x138>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a17      	ldr	r2, [pc, #92]	; (800552c <xPortStartScheduler+0x138>)
 80054d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80054d6:	4b15      	ldr	r3, [pc, #84]	; (800552c <xPortStartScheduler+0x138>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a14      	ldr	r2, [pc, #80]	; (800552c <xPortStartScheduler+0x138>)
 80054dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80054e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80054e2:	f000 f8db 	bl	800569c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80054e6:	4b12      	ldr	r3, [pc, #72]	; (8005530 <xPortStartScheduler+0x13c>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80054ec:	f000 f8fa 	bl	80056e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80054f0:	4b10      	ldr	r3, [pc, #64]	; (8005534 <xPortStartScheduler+0x140>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a0f      	ldr	r2, [pc, #60]	; (8005534 <xPortStartScheduler+0x140>)
 80054f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80054fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80054fc:	f7ff ff64 	bl	80053c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005500:	f7fe fd74 	bl	8003fec <vTaskSwitchContext>
    prvTaskExitError();
 8005504:	f7ff ff1a 	bl	800533c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	e000ed00 	.word	0xe000ed00
 8005518:	410fc271 	.word	0x410fc271
 800551c:	410fc270 	.word	0x410fc270
 8005520:	e000e400 	.word	0xe000e400
 8005524:	200002a4 	.word	0x200002a4
 8005528:	200002a8 	.word	0x200002a8
 800552c:	e000ed20 	.word	0xe000ed20
 8005530:	20000010 	.word	0x20000010
 8005534:	e000ef34 	.word	0xe000ef34

08005538 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
        __asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	607b      	str	r3, [r7, #4]
    }
 8005550:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005552:	4b0f      	ldr	r3, [pc, #60]	; (8005590 <vPortEnterCritical+0x58>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3301      	adds	r3, #1
 8005558:	4a0d      	ldr	r2, [pc, #52]	; (8005590 <vPortEnterCritical+0x58>)
 800555a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800555c:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <vPortEnterCritical+0x58>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d10f      	bne.n	8005584 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <vPortEnterCritical+0x5c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <vPortEnterCritical+0x4c>
        __asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	603b      	str	r3, [r7, #0]
    }
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <vPortEnterCritical+0x4a>
    }
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	20000010 	.word	0x20000010
 8005594:	e000ed04 	.word	0xe000ed04

08005598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800559e:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <vPortExitCritical+0x50>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <vPortExitCritical+0x24>
        __asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	607b      	str	r3, [r7, #4]
    }
 80055b8:	bf00      	nop
 80055ba:	e7fe      	b.n	80055ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80055bc:	4b0a      	ldr	r3, [pc, #40]	; (80055e8 <vPortExitCritical+0x50>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	4a09      	ldr	r2, [pc, #36]	; (80055e8 <vPortExitCritical+0x50>)
 80055c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80055c6:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <vPortExitCritical+0x50>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d105      	bne.n	80055da <vPortExitCritical+0x42>
 80055ce:	2300      	movs	r3, #0
 80055d0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	f383 8811 	msr	BASEPRI, r3
    }
 80055d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000010 	.word	0x20000010
 80055ec:	00000000 	.word	0x00000000

080055f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80055f0:	f3ef 8009 	mrs	r0, PSP
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	4b15      	ldr	r3, [pc, #84]	; (8005650 <pxCurrentTCBConst>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	f01e 0f10 	tst.w	lr, #16
 8005600:	bf08      	it	eq
 8005602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560a:	6010      	str	r0, [r2, #0]
 800560c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005614:	f380 8811 	msr	BASEPRI, r0
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f7fe fce4 	bl	8003fec <vTaskSwitchContext>
 8005624:	f04f 0000 	mov.w	r0, #0
 8005628:	f380 8811 	msr	BASEPRI, r0
 800562c:	bc09      	pop	{r0, r3}
 800562e:	6819      	ldr	r1, [r3, #0]
 8005630:	6808      	ldr	r0, [r1, #0]
 8005632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005636:	f01e 0f10 	tst.w	lr, #16
 800563a:	bf08      	it	eq
 800563c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005640:	f380 8809 	msr	PSP, r0
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	f3af 8000 	nop.w

08005650 <pxCurrentTCBConst>:
 8005650:	20000164 	.word	0x20000164
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop

08005658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
        __asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	607b      	str	r3, [r7, #4]
    }
 8005670:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005672:	f7fe fba5 	bl	8003dc0 <xTaskIncrementTick>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800567c:	4b06      	ldr	r3, [pc, #24]	; (8005698 <SysTick_Handler+0x40>)
 800567e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	2300      	movs	r3, #0
 8005686:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f383 8811 	msr	BASEPRI, r3
    }
 800568e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	e000ed04 	.word	0xe000ed04

0800569c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <vPortSetupTimerInterrupt+0x34>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <vPortSetupTimerInterrupt+0x38>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056ac:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <vPortSetupTimerInterrupt+0x3c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <vPortSetupTimerInterrupt+0x40>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	099b      	lsrs	r3, r3, #6
 80056b8:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <vPortSetupTimerInterrupt+0x44>)
 80056ba:	3b01      	subs	r3, #1
 80056bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056be:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <vPortSetupTimerInterrupt+0x34>)
 80056c0:	2207      	movs	r2, #7
 80056c2:	601a      	str	r2, [r3, #0]
}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	e000e010 	.word	0xe000e010
 80056d4:	e000e018 	.word	0xe000e018
 80056d8:	20000000 	.word	0x20000000
 80056dc:	10624dd3 	.word	0x10624dd3
 80056e0:	e000e014 	.word	0xe000e014

080056e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80056e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056f4 <vPortEnableVFP+0x10>
 80056e8:	6801      	ldr	r1, [r0, #0]
 80056ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056ee:	6001      	str	r1, [r0, #0]
 80056f0:	4770      	bx	lr
 80056f2:	0000      	.short	0x0000
 80056f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop

080056fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005702:	f3ef 8305 	mrs	r3, IPSR
 8005706:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b0f      	cmp	r3, #15
 800570c:	d914      	bls.n	8005738 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800570e:	4a17      	ldr	r2, [pc, #92]	; (800576c <vPortValidateInterruptPriority+0x70>)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005718:	4b15      	ldr	r3, [pc, #84]	; (8005770 <vPortValidateInterruptPriority+0x74>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	7afa      	ldrb	r2, [r7, #11]
 800571e:	429a      	cmp	r2, r3
 8005720:	d20a      	bcs.n	8005738 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	607b      	str	r3, [r7, #4]
    }
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005738:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <vPortValidateInterruptPriority+0x78>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005740:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <vPortValidateInterruptPriority+0x7c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d90a      	bls.n	800575e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	603b      	str	r3, [r7, #0]
    }
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <vPortValidateInterruptPriority+0x60>
    }
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	e000e3f0 	.word	0xe000e3f0
 8005770:	200002a4 	.word	0x200002a4
 8005774:	e000ed0c 	.word	0xe000ed0c
 8005778:	200002a8 	.word	0x200002a8

0800577c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	; 0x28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8005788:	f7fe f9f4 	bl	8003b74 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800578c:	4b53      	ldr	r3, [pc, #332]	; (80058dc <pvPortMalloc+0x160>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005794:	f000 f908 	bl	80059a8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d012      	beq.n	80057c4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800579e:	2208      	movs	r2, #8
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	3308      	adds	r3, #8
 80057aa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	43db      	mvns	r3, r3
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d804      	bhi.n	80057c0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	4413      	add	r3, r2
 80057bc:	607b      	str	r3, [r7, #4]
 80057be:	e001      	b.n	80057c4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	db70      	blt.n	80058ac <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d06d      	beq.n	80058ac <pvPortMalloc+0x130>
 80057d0:	4b43      	ldr	r3, [pc, #268]	; (80058e0 <pvPortMalloc+0x164>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d868      	bhi.n	80058ac <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80057da:	4b42      	ldr	r3, [pc, #264]	; (80058e4 <pvPortMalloc+0x168>)
 80057dc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80057de:	4b41      	ldr	r3, [pc, #260]	; (80058e4 <pvPortMalloc+0x168>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057e4:	e004      	b.n	80057f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d903      	bls.n	8005802 <pvPortMalloc+0x86>
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f1      	bne.n	80057e6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005802:	4b36      	ldr	r3, [pc, #216]	; (80058dc <pvPortMalloc+0x160>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005808:	429a      	cmp	r2, r3
 800580a:	d04f      	beq.n	80058ac <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2208      	movs	r2, #8
 8005812:	4413      	add	r3, r2
 8005814:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	1ad2      	subs	r2, r2, r3
 8005826:	2308      	movs	r3, #8
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	429a      	cmp	r2, r3
 800582c:	d91f      	bls.n	800586e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800582e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4413      	add	r3, r2
 8005834:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <pvPortMalloc+0xda>
        __asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	613b      	str	r3, [r7, #16]
    }
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	1ad2      	subs	r2, r2, r3
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005868:	6978      	ldr	r0, [r7, #20]
 800586a:	f000 f8f9 	bl	8005a60 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800586e:	4b1c      	ldr	r3, [pc, #112]	; (80058e0 <pvPortMalloc+0x164>)
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <pvPortMalloc+0x164>)
 800587a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800587c:	4b18      	ldr	r3, [pc, #96]	; (80058e0 <pvPortMalloc+0x164>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4b19      	ldr	r3, [pc, #100]	; (80058e8 <pvPortMalloc+0x16c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d203      	bcs.n	8005890 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005888:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <pvPortMalloc+0x164>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a16      	ldr	r2, [pc, #88]	; (80058e8 <pvPortMalloc+0x16c>)
 800588e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	2200      	movs	r2, #0
 80058a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80058a2:	4b12      	ldr	r3, [pc, #72]	; (80058ec <pvPortMalloc+0x170>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3301      	adds	r3, #1
 80058a8:	4a10      	ldr	r2, [pc, #64]	; (80058ec <pvPortMalloc+0x170>)
 80058aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80058ac:	f7fe f970 	bl	8003b90 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <pvPortMalloc+0x154>
        __asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	60fb      	str	r3, [r7, #12]
    }
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <pvPortMalloc+0x152>
    return pvReturn;
 80058d0:	69fb      	ldr	r3, [r7, #28]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3728      	adds	r7, #40	; 0x28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20012eb4 	.word	0x20012eb4
 80058e0:	20012eb8 	.word	0x20012eb8
 80058e4:	20012eac 	.word	0x20012eac
 80058e8:	20012ebc 	.word	0x20012ebc
 80058ec:	20012ec0 	.word	0x20012ec0

080058f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d049      	beq.n	8005996 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005902:	2308      	movs	r3, #8
 8005904:	425b      	negs	r3, r3
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4413      	add	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	db0a      	blt.n	800592e <vPortFree+0x3e>
        __asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	60fb      	str	r3, [r7, #12]
    }
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <vPortFree+0x5c>
        __asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	60bb      	str	r3, [r7, #8]
    }
 8005948:	bf00      	nop
 800594a:	e7fe      	b.n	800594a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	0fdb      	lsrs	r3, r3, #31
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01c      	beq.n	8005996 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d118      	bne.n	8005996 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005970:	f7fe f900 	bl	8003b74 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <vPortFree+0xb0>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4413      	add	r3, r2
 800597e:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <vPortFree+0xb0>)
 8005980:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005982:	6938      	ldr	r0, [r7, #16]
 8005984:	f000 f86c 	bl	8005a60 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005988:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <vPortFree+0xb4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	4a05      	ldr	r2, [pc, #20]	; (80059a4 <vPortFree+0xb4>)
 8005990:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005992:	f7fe f8fd 	bl	8003b90 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005996:	bf00      	nop
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20012eb8 	.word	0x20012eb8
 80059a4:	20012ec4 	.word	0x20012ec4

080059a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059ae:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80059b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80059b4:	4b25      	ldr	r3, [pc, #148]	; (8005a4c <prvHeapInit+0xa4>)
 80059b6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00c      	beq.n	80059dc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3307      	adds	r3, #7
 80059c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0307 	bic.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	4a1d      	ldr	r2, [pc, #116]	; (8005a4c <prvHeapInit+0xa4>)
 80059d8:	4413      	add	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059e0:	4a1b      	ldr	r2, [pc, #108]	; (8005a50 <prvHeapInit+0xa8>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <prvHeapInit+0xa8>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	4413      	add	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80059f4:	2208      	movs	r2, #8
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0307 	bic.w	r3, r3, #7
 8005a02:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a13      	ldr	r2, [pc, #76]	; (8005a54 <prvHeapInit+0xac>)
 8005a08:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <prvHeapInit+0xac>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005a12:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <prvHeapInit+0xac>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	1ad2      	subs	r2, r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a28:	4b0a      	ldr	r3, [pc, #40]	; (8005a54 <prvHeapInit+0xac>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <prvHeapInit+0xb0>)
 8005a36:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <prvHeapInit+0xb4>)
 8005a3e:	6013      	str	r3, [r2, #0]
}
 8005a40:	bf00      	nop
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	200002ac 	.word	0x200002ac
 8005a50:	20012eac 	.word	0x20012eac
 8005a54:	20012eb4 	.word	0x20012eb4
 8005a58:	20012ebc 	.word	0x20012ebc
 8005a5c:	20012eb8 	.word	0x20012eb8

08005a60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a68:	4b28      	ldr	r3, [pc, #160]	; (8005b0c <prvInsertBlockIntoFreeList+0xac>)
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	e002      	b.n	8005a74 <prvInsertBlockIntoFreeList+0x14>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d8f7      	bhi.n	8005a6e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	4413      	add	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d108      	bne.n	8005aa2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	441a      	add	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	441a      	add	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d118      	bne.n	8005ae8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	4b15      	ldr	r3, [pc, #84]	; (8005b10 <prvInsertBlockIntoFreeList+0xb0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d00d      	beq.n	8005ade <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	441a      	add	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	e008      	b.n	8005af0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <prvInsertBlockIntoFreeList+0xb0>)
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	e003      	b.n	8005af0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d002      	beq.n	8005afe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005afe:	bf00      	nop
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20012eac 	.word	0x20012eac
 8005b10:	20012eb4 	.word	0x20012eb4

08005b14 <siprintf>:
 8005b14:	b40e      	push	{r1, r2, r3}
 8005b16:	b500      	push	{lr}
 8005b18:	b09c      	sub	sp, #112	; 0x70
 8005b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b1c:	9002      	str	r0, [sp, #8]
 8005b1e:	9006      	str	r0, [sp, #24]
 8005b20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b24:	4809      	ldr	r0, [pc, #36]	; (8005b4c <siprintf+0x38>)
 8005b26:	9107      	str	r1, [sp, #28]
 8005b28:	9104      	str	r1, [sp, #16]
 8005b2a:	4909      	ldr	r1, [pc, #36]	; (8005b50 <siprintf+0x3c>)
 8005b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b30:	9105      	str	r1, [sp, #20]
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	a902      	add	r1, sp, #8
 8005b38:	f000 f9a0 	bl	8005e7c <_svfiprintf_r>
 8005b3c:	9b02      	ldr	r3, [sp, #8]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	b01c      	add	sp, #112	; 0x70
 8005b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b48:	b003      	add	sp, #12
 8005b4a:	4770      	bx	lr
 8005b4c:	20000060 	.word	0x20000060
 8005b50:	ffff0208 	.word	0xffff0208

08005b54 <memset>:
 8005b54:	4402      	add	r2, r0
 8005b56:	4603      	mov	r3, r0
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d100      	bne.n	8005b5e <memset+0xa>
 8005b5c:	4770      	bx	lr
 8005b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b62:	e7f9      	b.n	8005b58 <memset+0x4>

08005b64 <__errno>:
 8005b64:	4b01      	ldr	r3, [pc, #4]	; (8005b6c <__errno+0x8>)
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000060 	.word	0x20000060

08005b70 <__libc_init_array>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	4d0d      	ldr	r5, [pc, #52]	; (8005ba8 <__libc_init_array+0x38>)
 8005b74:	4c0d      	ldr	r4, [pc, #52]	; (8005bac <__libc_init_array+0x3c>)
 8005b76:	1b64      	subs	r4, r4, r5
 8005b78:	10a4      	asrs	r4, r4, #2
 8005b7a:	2600      	movs	r6, #0
 8005b7c:	42a6      	cmp	r6, r4
 8005b7e:	d109      	bne.n	8005b94 <__libc_init_array+0x24>
 8005b80:	4d0b      	ldr	r5, [pc, #44]	; (8005bb0 <__libc_init_array+0x40>)
 8005b82:	4c0c      	ldr	r4, [pc, #48]	; (8005bb4 <__libc_init_array+0x44>)
 8005b84:	f000 fc6a 	bl	800645c <_init>
 8005b88:	1b64      	subs	r4, r4, r5
 8005b8a:	10a4      	asrs	r4, r4, #2
 8005b8c:	2600      	movs	r6, #0
 8005b8e:	42a6      	cmp	r6, r4
 8005b90:	d105      	bne.n	8005b9e <__libc_init_array+0x2e>
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b98:	4798      	blx	r3
 8005b9a:	3601      	adds	r6, #1
 8005b9c:	e7ee      	b.n	8005b7c <__libc_init_array+0xc>
 8005b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba2:	4798      	blx	r3
 8005ba4:	3601      	adds	r6, #1
 8005ba6:	e7f2      	b.n	8005b8e <__libc_init_array+0x1e>
 8005ba8:	0800657c 	.word	0x0800657c
 8005bac:	0800657c 	.word	0x0800657c
 8005bb0:	0800657c 	.word	0x0800657c
 8005bb4:	08006580 	.word	0x08006580

08005bb8 <__retarget_lock_acquire_recursive>:
 8005bb8:	4770      	bx	lr

08005bba <__retarget_lock_release_recursive>:
 8005bba:	4770      	bx	lr

08005bbc <memcpy>:
 8005bbc:	440a      	add	r2, r1
 8005bbe:	4291      	cmp	r1, r2
 8005bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bc4:	d100      	bne.n	8005bc8 <memcpy+0xc>
 8005bc6:	4770      	bx	lr
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bd2:	4291      	cmp	r1, r2
 8005bd4:	d1f9      	bne.n	8005bca <memcpy+0xe>
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <_free_r>:
 8005bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bda:	2900      	cmp	r1, #0
 8005bdc:	d044      	beq.n	8005c68 <_free_r+0x90>
 8005bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005be2:	9001      	str	r0, [sp, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f1a1 0404 	sub.w	r4, r1, #4
 8005bea:	bfb8      	it	lt
 8005bec:	18e4      	addlt	r4, r4, r3
 8005bee:	f000 f8df 	bl	8005db0 <__malloc_lock>
 8005bf2:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <_free_r+0x94>)
 8005bf4:	9801      	ldr	r0, [sp, #4]
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	b933      	cbnz	r3, 8005c08 <_free_r+0x30>
 8005bfa:	6063      	str	r3, [r4, #4]
 8005bfc:	6014      	str	r4, [r2, #0]
 8005bfe:	b003      	add	sp, #12
 8005c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c04:	f000 b8da 	b.w	8005dbc <__malloc_unlock>
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d908      	bls.n	8005c1e <_free_r+0x46>
 8005c0c:	6825      	ldr	r5, [r4, #0]
 8005c0e:	1961      	adds	r1, r4, r5
 8005c10:	428b      	cmp	r3, r1
 8005c12:	bf01      	itttt	eq
 8005c14:	6819      	ldreq	r1, [r3, #0]
 8005c16:	685b      	ldreq	r3, [r3, #4]
 8005c18:	1949      	addeq	r1, r1, r5
 8005c1a:	6021      	streq	r1, [r4, #0]
 8005c1c:	e7ed      	b.n	8005bfa <_free_r+0x22>
 8005c1e:	461a      	mov	r2, r3
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	b10b      	cbz	r3, 8005c28 <_free_r+0x50>
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	d9fa      	bls.n	8005c1e <_free_r+0x46>
 8005c28:	6811      	ldr	r1, [r2, #0]
 8005c2a:	1855      	adds	r5, r2, r1
 8005c2c:	42a5      	cmp	r5, r4
 8005c2e:	d10b      	bne.n	8005c48 <_free_r+0x70>
 8005c30:	6824      	ldr	r4, [r4, #0]
 8005c32:	4421      	add	r1, r4
 8005c34:	1854      	adds	r4, r2, r1
 8005c36:	42a3      	cmp	r3, r4
 8005c38:	6011      	str	r1, [r2, #0]
 8005c3a:	d1e0      	bne.n	8005bfe <_free_r+0x26>
 8005c3c:	681c      	ldr	r4, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	6053      	str	r3, [r2, #4]
 8005c42:	440c      	add	r4, r1
 8005c44:	6014      	str	r4, [r2, #0]
 8005c46:	e7da      	b.n	8005bfe <_free_r+0x26>
 8005c48:	d902      	bls.n	8005c50 <_free_r+0x78>
 8005c4a:	230c      	movs	r3, #12
 8005c4c:	6003      	str	r3, [r0, #0]
 8005c4e:	e7d6      	b.n	8005bfe <_free_r+0x26>
 8005c50:	6825      	ldr	r5, [r4, #0]
 8005c52:	1961      	adds	r1, r4, r5
 8005c54:	428b      	cmp	r3, r1
 8005c56:	bf04      	itt	eq
 8005c58:	6819      	ldreq	r1, [r3, #0]
 8005c5a:	685b      	ldreq	r3, [r3, #4]
 8005c5c:	6063      	str	r3, [r4, #4]
 8005c5e:	bf04      	itt	eq
 8005c60:	1949      	addeq	r1, r1, r5
 8005c62:	6021      	streq	r1, [r4, #0]
 8005c64:	6054      	str	r4, [r2, #4]
 8005c66:	e7ca      	b.n	8005bfe <_free_r+0x26>
 8005c68:	b003      	add	sp, #12
 8005c6a:	bd30      	pop	{r4, r5, pc}
 8005c6c:	20013008 	.word	0x20013008

08005c70 <sbrk_aligned>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	4e0e      	ldr	r6, [pc, #56]	; (8005cac <sbrk_aligned+0x3c>)
 8005c74:	460c      	mov	r4, r1
 8005c76:	6831      	ldr	r1, [r6, #0]
 8005c78:	4605      	mov	r5, r0
 8005c7a:	b911      	cbnz	r1, 8005c82 <sbrk_aligned+0x12>
 8005c7c:	f000 fba6 	bl	80063cc <_sbrk_r>
 8005c80:	6030      	str	r0, [r6, #0]
 8005c82:	4621      	mov	r1, r4
 8005c84:	4628      	mov	r0, r5
 8005c86:	f000 fba1 	bl	80063cc <_sbrk_r>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d00a      	beq.n	8005ca4 <sbrk_aligned+0x34>
 8005c8e:	1cc4      	adds	r4, r0, #3
 8005c90:	f024 0403 	bic.w	r4, r4, #3
 8005c94:	42a0      	cmp	r0, r4
 8005c96:	d007      	beq.n	8005ca8 <sbrk_aligned+0x38>
 8005c98:	1a21      	subs	r1, r4, r0
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 fb96 	bl	80063cc <_sbrk_r>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d101      	bne.n	8005ca8 <sbrk_aligned+0x38>
 8005ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8005ca8:	4620      	mov	r0, r4
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	2001300c 	.word	0x2001300c

08005cb0 <_malloc_r>:
 8005cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cb4:	1ccd      	adds	r5, r1, #3
 8005cb6:	f025 0503 	bic.w	r5, r5, #3
 8005cba:	3508      	adds	r5, #8
 8005cbc:	2d0c      	cmp	r5, #12
 8005cbe:	bf38      	it	cc
 8005cc0:	250c      	movcc	r5, #12
 8005cc2:	2d00      	cmp	r5, #0
 8005cc4:	4607      	mov	r7, r0
 8005cc6:	db01      	blt.n	8005ccc <_malloc_r+0x1c>
 8005cc8:	42a9      	cmp	r1, r5
 8005cca:	d905      	bls.n	8005cd8 <_malloc_r+0x28>
 8005ccc:	230c      	movs	r3, #12
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	2600      	movs	r6, #0
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005dac <_malloc_r+0xfc>
 8005cdc:	f000 f868 	bl	8005db0 <__malloc_lock>
 8005ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce4:	461c      	mov	r4, r3
 8005ce6:	bb5c      	cbnz	r4, 8005d40 <_malloc_r+0x90>
 8005ce8:	4629      	mov	r1, r5
 8005cea:	4638      	mov	r0, r7
 8005cec:	f7ff ffc0 	bl	8005c70 <sbrk_aligned>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	d155      	bne.n	8005da2 <_malloc_r+0xf2>
 8005cf6:	f8d8 4000 	ldr.w	r4, [r8]
 8005cfa:	4626      	mov	r6, r4
 8005cfc:	2e00      	cmp	r6, #0
 8005cfe:	d145      	bne.n	8005d8c <_malloc_r+0xdc>
 8005d00:	2c00      	cmp	r4, #0
 8005d02:	d048      	beq.n	8005d96 <_malloc_r+0xe6>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	4631      	mov	r1, r6
 8005d08:	4638      	mov	r0, r7
 8005d0a:	eb04 0903 	add.w	r9, r4, r3
 8005d0e:	f000 fb5d 	bl	80063cc <_sbrk_r>
 8005d12:	4581      	cmp	r9, r0
 8005d14:	d13f      	bne.n	8005d96 <_malloc_r+0xe6>
 8005d16:	6821      	ldr	r1, [r4, #0]
 8005d18:	1a6d      	subs	r5, r5, r1
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	4638      	mov	r0, r7
 8005d1e:	f7ff ffa7 	bl	8005c70 <sbrk_aligned>
 8005d22:	3001      	adds	r0, #1
 8005d24:	d037      	beq.n	8005d96 <_malloc_r+0xe6>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	442b      	add	r3, r5
 8005d2a:	6023      	str	r3, [r4, #0]
 8005d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d038      	beq.n	8005da6 <_malloc_r+0xf6>
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	42a2      	cmp	r2, r4
 8005d38:	d12b      	bne.n	8005d92 <_malloc_r+0xe2>
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	e00f      	b.n	8005d60 <_malloc_r+0xb0>
 8005d40:	6822      	ldr	r2, [r4, #0]
 8005d42:	1b52      	subs	r2, r2, r5
 8005d44:	d41f      	bmi.n	8005d86 <_malloc_r+0xd6>
 8005d46:	2a0b      	cmp	r2, #11
 8005d48:	d917      	bls.n	8005d7a <_malloc_r+0xca>
 8005d4a:	1961      	adds	r1, r4, r5
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	6025      	str	r5, [r4, #0]
 8005d50:	bf18      	it	ne
 8005d52:	6059      	strne	r1, [r3, #4]
 8005d54:	6863      	ldr	r3, [r4, #4]
 8005d56:	bf08      	it	eq
 8005d58:	f8c8 1000 	streq.w	r1, [r8]
 8005d5c:	5162      	str	r2, [r4, r5]
 8005d5e:	604b      	str	r3, [r1, #4]
 8005d60:	4638      	mov	r0, r7
 8005d62:	f104 060b 	add.w	r6, r4, #11
 8005d66:	f000 f829 	bl	8005dbc <__malloc_unlock>
 8005d6a:	f026 0607 	bic.w	r6, r6, #7
 8005d6e:	1d23      	adds	r3, r4, #4
 8005d70:	1af2      	subs	r2, r6, r3
 8005d72:	d0ae      	beq.n	8005cd2 <_malloc_r+0x22>
 8005d74:	1b9b      	subs	r3, r3, r6
 8005d76:	50a3      	str	r3, [r4, r2]
 8005d78:	e7ab      	b.n	8005cd2 <_malloc_r+0x22>
 8005d7a:	42a3      	cmp	r3, r4
 8005d7c:	6862      	ldr	r2, [r4, #4]
 8005d7e:	d1dd      	bne.n	8005d3c <_malloc_r+0x8c>
 8005d80:	f8c8 2000 	str.w	r2, [r8]
 8005d84:	e7ec      	b.n	8005d60 <_malloc_r+0xb0>
 8005d86:	4623      	mov	r3, r4
 8005d88:	6864      	ldr	r4, [r4, #4]
 8005d8a:	e7ac      	b.n	8005ce6 <_malloc_r+0x36>
 8005d8c:	4634      	mov	r4, r6
 8005d8e:	6876      	ldr	r6, [r6, #4]
 8005d90:	e7b4      	b.n	8005cfc <_malloc_r+0x4c>
 8005d92:	4613      	mov	r3, r2
 8005d94:	e7cc      	b.n	8005d30 <_malloc_r+0x80>
 8005d96:	230c      	movs	r3, #12
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	4638      	mov	r0, r7
 8005d9c:	f000 f80e 	bl	8005dbc <__malloc_unlock>
 8005da0:	e797      	b.n	8005cd2 <_malloc_r+0x22>
 8005da2:	6025      	str	r5, [r4, #0]
 8005da4:	e7dc      	b.n	8005d60 <_malloc_r+0xb0>
 8005da6:	605b      	str	r3, [r3, #4]
 8005da8:	deff      	udf	#255	; 0xff
 8005daa:	bf00      	nop
 8005dac:	20013008 	.word	0x20013008

08005db0 <__malloc_lock>:
 8005db0:	4801      	ldr	r0, [pc, #4]	; (8005db8 <__malloc_lock+0x8>)
 8005db2:	f7ff bf01 	b.w	8005bb8 <__retarget_lock_acquire_recursive>
 8005db6:	bf00      	nop
 8005db8:	20013004 	.word	0x20013004

08005dbc <__malloc_unlock>:
 8005dbc:	4801      	ldr	r0, [pc, #4]	; (8005dc4 <__malloc_unlock+0x8>)
 8005dbe:	f7ff befc 	b.w	8005bba <__retarget_lock_release_recursive>
 8005dc2:	bf00      	nop
 8005dc4:	20013004 	.word	0x20013004

08005dc8 <__ssputs_r>:
 8005dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dcc:	688e      	ldr	r6, [r1, #8]
 8005dce:	461f      	mov	r7, r3
 8005dd0:	42be      	cmp	r6, r7
 8005dd2:	680b      	ldr	r3, [r1, #0]
 8005dd4:	4682      	mov	sl, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	4690      	mov	r8, r2
 8005dda:	d82c      	bhi.n	8005e36 <__ssputs_r+0x6e>
 8005ddc:	898a      	ldrh	r2, [r1, #12]
 8005dde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005de2:	d026      	beq.n	8005e32 <__ssputs_r+0x6a>
 8005de4:	6965      	ldr	r5, [r4, #20]
 8005de6:	6909      	ldr	r1, [r1, #16]
 8005de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dec:	eba3 0901 	sub.w	r9, r3, r1
 8005df0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005df4:	1c7b      	adds	r3, r7, #1
 8005df6:	444b      	add	r3, r9
 8005df8:	106d      	asrs	r5, r5, #1
 8005dfa:	429d      	cmp	r5, r3
 8005dfc:	bf38      	it	cc
 8005dfe:	461d      	movcc	r5, r3
 8005e00:	0553      	lsls	r3, r2, #21
 8005e02:	d527      	bpl.n	8005e54 <__ssputs_r+0x8c>
 8005e04:	4629      	mov	r1, r5
 8005e06:	f7ff ff53 	bl	8005cb0 <_malloc_r>
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	b360      	cbz	r0, 8005e68 <__ssputs_r+0xa0>
 8005e0e:	6921      	ldr	r1, [r4, #16]
 8005e10:	464a      	mov	r2, r9
 8005e12:	f7ff fed3 	bl	8005bbc <memcpy>
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e20:	81a3      	strh	r3, [r4, #12]
 8005e22:	6126      	str	r6, [r4, #16]
 8005e24:	6165      	str	r5, [r4, #20]
 8005e26:	444e      	add	r6, r9
 8005e28:	eba5 0509 	sub.w	r5, r5, r9
 8005e2c:	6026      	str	r6, [r4, #0]
 8005e2e:	60a5      	str	r5, [r4, #8]
 8005e30:	463e      	mov	r6, r7
 8005e32:	42be      	cmp	r6, r7
 8005e34:	d900      	bls.n	8005e38 <__ssputs_r+0x70>
 8005e36:	463e      	mov	r6, r7
 8005e38:	6820      	ldr	r0, [r4, #0]
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	4641      	mov	r1, r8
 8005e3e:	f000 faab 	bl	8006398 <memmove>
 8005e42:	68a3      	ldr	r3, [r4, #8]
 8005e44:	1b9b      	subs	r3, r3, r6
 8005e46:	60a3      	str	r3, [r4, #8]
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	4433      	add	r3, r6
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	2000      	movs	r0, #0
 8005e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e54:	462a      	mov	r2, r5
 8005e56:	f000 fac9 	bl	80063ec <_realloc_r>
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d1e0      	bne.n	8005e22 <__ssputs_r+0x5a>
 8005e60:	6921      	ldr	r1, [r4, #16]
 8005e62:	4650      	mov	r0, sl
 8005e64:	f7ff feb8 	bl	8005bd8 <_free_r>
 8005e68:	230c      	movs	r3, #12
 8005e6a:	f8ca 3000 	str.w	r3, [sl]
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7a:	e7e9      	b.n	8005e50 <__ssputs_r+0x88>

08005e7c <_svfiprintf_r>:
 8005e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e80:	4698      	mov	r8, r3
 8005e82:	898b      	ldrh	r3, [r1, #12]
 8005e84:	061b      	lsls	r3, r3, #24
 8005e86:	b09d      	sub	sp, #116	; 0x74
 8005e88:	4607      	mov	r7, r0
 8005e8a:	460d      	mov	r5, r1
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	d50e      	bpl.n	8005eae <_svfiprintf_r+0x32>
 8005e90:	690b      	ldr	r3, [r1, #16]
 8005e92:	b963      	cbnz	r3, 8005eae <_svfiprintf_r+0x32>
 8005e94:	2140      	movs	r1, #64	; 0x40
 8005e96:	f7ff ff0b 	bl	8005cb0 <_malloc_r>
 8005e9a:	6028      	str	r0, [r5, #0]
 8005e9c:	6128      	str	r0, [r5, #16]
 8005e9e:	b920      	cbnz	r0, 8005eaa <_svfiprintf_r+0x2e>
 8005ea0:	230c      	movs	r3, #12
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	e0d0      	b.n	800604c <_svfiprintf_r+0x1d0>
 8005eaa:	2340      	movs	r3, #64	; 0x40
 8005eac:	616b      	str	r3, [r5, #20]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb2:	2320      	movs	r3, #32
 8005eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ebc:	2330      	movs	r3, #48	; 0x30
 8005ebe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006064 <_svfiprintf_r+0x1e8>
 8005ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ec6:	f04f 0901 	mov.w	r9, #1
 8005eca:	4623      	mov	r3, r4
 8005ecc:	469a      	mov	sl, r3
 8005ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ed2:	b10a      	cbz	r2, 8005ed8 <_svfiprintf_r+0x5c>
 8005ed4:	2a25      	cmp	r2, #37	; 0x25
 8005ed6:	d1f9      	bne.n	8005ecc <_svfiprintf_r+0x50>
 8005ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8005edc:	d00b      	beq.n	8005ef6 <_svfiprintf_r+0x7a>
 8005ede:	465b      	mov	r3, fp
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f7ff ff6f 	bl	8005dc8 <__ssputs_r>
 8005eea:	3001      	adds	r0, #1
 8005eec:	f000 80a9 	beq.w	8006042 <_svfiprintf_r+0x1c6>
 8005ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef2:	445a      	add	r2, fp
 8005ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80a1 	beq.w	8006042 <_svfiprintf_r+0x1c6>
 8005f00:	2300      	movs	r3, #0
 8005f02:	f04f 32ff 	mov.w	r2, #4294967295
 8005f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f0a:	f10a 0a01 	add.w	sl, sl, #1
 8005f0e:	9304      	str	r3, [sp, #16]
 8005f10:	9307      	str	r3, [sp, #28]
 8005f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f16:	931a      	str	r3, [sp, #104]	; 0x68
 8005f18:	4654      	mov	r4, sl
 8005f1a:	2205      	movs	r2, #5
 8005f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f20:	4850      	ldr	r0, [pc, #320]	; (8006064 <_svfiprintf_r+0x1e8>)
 8005f22:	f7fa f95d 	bl	80001e0 <memchr>
 8005f26:	9a04      	ldr	r2, [sp, #16]
 8005f28:	b9d8      	cbnz	r0, 8005f62 <_svfiprintf_r+0xe6>
 8005f2a:	06d0      	lsls	r0, r2, #27
 8005f2c:	bf44      	itt	mi
 8005f2e:	2320      	movmi	r3, #32
 8005f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f34:	0711      	lsls	r1, r2, #28
 8005f36:	bf44      	itt	mi
 8005f38:	232b      	movmi	r3, #43	; 0x2b
 8005f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f42:	2b2a      	cmp	r3, #42	; 0x2a
 8005f44:	d015      	beq.n	8005f72 <_svfiprintf_r+0xf6>
 8005f46:	9a07      	ldr	r2, [sp, #28]
 8005f48:	4654      	mov	r4, sl
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	f04f 0c0a 	mov.w	ip, #10
 8005f50:	4621      	mov	r1, r4
 8005f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f56:	3b30      	subs	r3, #48	; 0x30
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	d94d      	bls.n	8005ff8 <_svfiprintf_r+0x17c>
 8005f5c:	b1b0      	cbz	r0, 8005f8c <_svfiprintf_r+0x110>
 8005f5e:	9207      	str	r2, [sp, #28]
 8005f60:	e014      	b.n	8005f8c <_svfiprintf_r+0x110>
 8005f62:	eba0 0308 	sub.w	r3, r0, r8
 8005f66:	fa09 f303 	lsl.w	r3, r9, r3
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	9304      	str	r3, [sp, #16]
 8005f6e:	46a2      	mov	sl, r4
 8005f70:	e7d2      	b.n	8005f18 <_svfiprintf_r+0x9c>
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	1d19      	adds	r1, r3, #4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	9103      	str	r1, [sp, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bfbb      	ittet	lt
 8005f7e:	425b      	neglt	r3, r3
 8005f80:	f042 0202 	orrlt.w	r2, r2, #2
 8005f84:	9307      	strge	r3, [sp, #28]
 8005f86:	9307      	strlt	r3, [sp, #28]
 8005f88:	bfb8      	it	lt
 8005f8a:	9204      	strlt	r2, [sp, #16]
 8005f8c:	7823      	ldrb	r3, [r4, #0]
 8005f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f90:	d10c      	bne.n	8005fac <_svfiprintf_r+0x130>
 8005f92:	7863      	ldrb	r3, [r4, #1]
 8005f94:	2b2a      	cmp	r3, #42	; 0x2a
 8005f96:	d134      	bne.n	8006002 <_svfiprintf_r+0x186>
 8005f98:	9b03      	ldr	r3, [sp, #12]
 8005f9a:	1d1a      	adds	r2, r3, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	9203      	str	r2, [sp, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bfb8      	it	lt
 8005fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fa8:	3402      	adds	r4, #2
 8005faa:	9305      	str	r3, [sp, #20]
 8005fac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006074 <_svfiprintf_r+0x1f8>
 8005fb0:	7821      	ldrb	r1, [r4, #0]
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	4650      	mov	r0, sl
 8005fb6:	f7fa f913 	bl	80001e0 <memchr>
 8005fba:	b138      	cbz	r0, 8005fcc <_svfiprintf_r+0x150>
 8005fbc:	9b04      	ldr	r3, [sp, #16]
 8005fbe:	eba0 000a 	sub.w	r0, r0, sl
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	4082      	lsls	r2, r0
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	3401      	adds	r4, #1
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd0:	4825      	ldr	r0, [pc, #148]	; (8006068 <_svfiprintf_r+0x1ec>)
 8005fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fd6:	2206      	movs	r2, #6
 8005fd8:	f7fa f902 	bl	80001e0 <memchr>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d038      	beq.n	8006052 <_svfiprintf_r+0x1d6>
 8005fe0:	4b22      	ldr	r3, [pc, #136]	; (800606c <_svfiprintf_r+0x1f0>)
 8005fe2:	bb1b      	cbnz	r3, 800602c <_svfiprintf_r+0x1b0>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	3307      	adds	r3, #7
 8005fe8:	f023 0307 	bic.w	r3, r3, #7
 8005fec:	3308      	adds	r3, #8
 8005fee:	9303      	str	r3, [sp, #12]
 8005ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff2:	4433      	add	r3, r6
 8005ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff6:	e768      	b.n	8005eca <_svfiprintf_r+0x4e>
 8005ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	2001      	movs	r0, #1
 8006000:	e7a6      	b.n	8005f50 <_svfiprintf_r+0xd4>
 8006002:	2300      	movs	r3, #0
 8006004:	3401      	adds	r4, #1
 8006006:	9305      	str	r3, [sp, #20]
 8006008:	4619      	mov	r1, r3
 800600a:	f04f 0c0a 	mov.w	ip, #10
 800600e:	4620      	mov	r0, r4
 8006010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006014:	3a30      	subs	r2, #48	; 0x30
 8006016:	2a09      	cmp	r2, #9
 8006018:	d903      	bls.n	8006022 <_svfiprintf_r+0x1a6>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0c6      	beq.n	8005fac <_svfiprintf_r+0x130>
 800601e:	9105      	str	r1, [sp, #20]
 8006020:	e7c4      	b.n	8005fac <_svfiprintf_r+0x130>
 8006022:	fb0c 2101 	mla	r1, ip, r1, r2
 8006026:	4604      	mov	r4, r0
 8006028:	2301      	movs	r3, #1
 800602a:	e7f0      	b.n	800600e <_svfiprintf_r+0x192>
 800602c:	ab03      	add	r3, sp, #12
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	462a      	mov	r2, r5
 8006032:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <_svfiprintf_r+0x1f4>)
 8006034:	a904      	add	r1, sp, #16
 8006036:	4638      	mov	r0, r7
 8006038:	f3af 8000 	nop.w
 800603c:	1c42      	adds	r2, r0, #1
 800603e:	4606      	mov	r6, r0
 8006040:	d1d6      	bne.n	8005ff0 <_svfiprintf_r+0x174>
 8006042:	89ab      	ldrh	r3, [r5, #12]
 8006044:	065b      	lsls	r3, r3, #25
 8006046:	f53f af2d 	bmi.w	8005ea4 <_svfiprintf_r+0x28>
 800604a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800604c:	b01d      	add	sp, #116	; 0x74
 800604e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006052:	ab03      	add	r3, sp, #12
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	462a      	mov	r2, r5
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <_svfiprintf_r+0x1f4>)
 800605a:	a904      	add	r1, sp, #16
 800605c:	4638      	mov	r0, r7
 800605e:	f000 f879 	bl	8006154 <_printf_i>
 8006062:	e7eb      	b.n	800603c <_svfiprintf_r+0x1c0>
 8006064:	08006540 	.word	0x08006540
 8006068:	0800654a 	.word	0x0800654a
 800606c:	00000000 	.word	0x00000000
 8006070:	08005dc9 	.word	0x08005dc9
 8006074:	08006546 	.word	0x08006546

08006078 <_printf_common>:
 8006078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800607c:	4616      	mov	r6, r2
 800607e:	4699      	mov	r9, r3
 8006080:	688a      	ldr	r2, [r1, #8]
 8006082:	690b      	ldr	r3, [r1, #16]
 8006084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006088:	4293      	cmp	r3, r2
 800608a:	bfb8      	it	lt
 800608c:	4613      	movlt	r3, r2
 800608e:	6033      	str	r3, [r6, #0]
 8006090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006094:	4607      	mov	r7, r0
 8006096:	460c      	mov	r4, r1
 8006098:	b10a      	cbz	r2, 800609e <_printf_common+0x26>
 800609a:	3301      	adds	r3, #1
 800609c:	6033      	str	r3, [r6, #0]
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	0699      	lsls	r1, r3, #26
 80060a2:	bf42      	ittt	mi
 80060a4:	6833      	ldrmi	r3, [r6, #0]
 80060a6:	3302      	addmi	r3, #2
 80060a8:	6033      	strmi	r3, [r6, #0]
 80060aa:	6825      	ldr	r5, [r4, #0]
 80060ac:	f015 0506 	ands.w	r5, r5, #6
 80060b0:	d106      	bne.n	80060c0 <_printf_common+0x48>
 80060b2:	f104 0a19 	add.w	sl, r4, #25
 80060b6:	68e3      	ldr	r3, [r4, #12]
 80060b8:	6832      	ldr	r2, [r6, #0]
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	42ab      	cmp	r3, r5
 80060be:	dc26      	bgt.n	800610e <_printf_common+0x96>
 80060c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060c4:	1e13      	subs	r3, r2, #0
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	bf18      	it	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	0692      	lsls	r2, r2, #26
 80060ce:	d42b      	bmi.n	8006128 <_printf_common+0xb0>
 80060d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060d4:	4649      	mov	r1, r9
 80060d6:	4638      	mov	r0, r7
 80060d8:	47c0      	blx	r8
 80060da:	3001      	adds	r0, #1
 80060dc:	d01e      	beq.n	800611c <_printf_common+0xa4>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	6922      	ldr	r2, [r4, #16]
 80060e2:	f003 0306 	and.w	r3, r3, #6
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	bf02      	ittt	eq
 80060ea:	68e5      	ldreq	r5, [r4, #12]
 80060ec:	6833      	ldreq	r3, [r6, #0]
 80060ee:	1aed      	subeq	r5, r5, r3
 80060f0:	68a3      	ldr	r3, [r4, #8]
 80060f2:	bf0c      	ite	eq
 80060f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060f8:	2500      	movne	r5, #0
 80060fa:	4293      	cmp	r3, r2
 80060fc:	bfc4      	itt	gt
 80060fe:	1a9b      	subgt	r3, r3, r2
 8006100:	18ed      	addgt	r5, r5, r3
 8006102:	2600      	movs	r6, #0
 8006104:	341a      	adds	r4, #26
 8006106:	42b5      	cmp	r5, r6
 8006108:	d11a      	bne.n	8006140 <_printf_common+0xc8>
 800610a:	2000      	movs	r0, #0
 800610c:	e008      	b.n	8006120 <_printf_common+0xa8>
 800610e:	2301      	movs	r3, #1
 8006110:	4652      	mov	r2, sl
 8006112:	4649      	mov	r1, r9
 8006114:	4638      	mov	r0, r7
 8006116:	47c0      	blx	r8
 8006118:	3001      	adds	r0, #1
 800611a:	d103      	bne.n	8006124 <_printf_common+0xac>
 800611c:	f04f 30ff 	mov.w	r0, #4294967295
 8006120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006124:	3501      	adds	r5, #1
 8006126:	e7c6      	b.n	80060b6 <_printf_common+0x3e>
 8006128:	18e1      	adds	r1, r4, r3
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	2030      	movs	r0, #48	; 0x30
 800612e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006132:	4422      	add	r2, r4
 8006134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800613c:	3302      	adds	r3, #2
 800613e:	e7c7      	b.n	80060d0 <_printf_common+0x58>
 8006140:	2301      	movs	r3, #1
 8006142:	4622      	mov	r2, r4
 8006144:	4649      	mov	r1, r9
 8006146:	4638      	mov	r0, r7
 8006148:	47c0      	blx	r8
 800614a:	3001      	adds	r0, #1
 800614c:	d0e6      	beq.n	800611c <_printf_common+0xa4>
 800614e:	3601      	adds	r6, #1
 8006150:	e7d9      	b.n	8006106 <_printf_common+0x8e>
	...

08006154 <_printf_i>:
 8006154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	7e0f      	ldrb	r7, [r1, #24]
 800615a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800615c:	2f78      	cmp	r7, #120	; 0x78
 800615e:	4691      	mov	r9, r2
 8006160:	4680      	mov	r8, r0
 8006162:	460c      	mov	r4, r1
 8006164:	469a      	mov	sl, r3
 8006166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800616a:	d807      	bhi.n	800617c <_printf_i+0x28>
 800616c:	2f62      	cmp	r7, #98	; 0x62
 800616e:	d80a      	bhi.n	8006186 <_printf_i+0x32>
 8006170:	2f00      	cmp	r7, #0
 8006172:	f000 80d4 	beq.w	800631e <_printf_i+0x1ca>
 8006176:	2f58      	cmp	r7, #88	; 0x58
 8006178:	f000 80c0 	beq.w	80062fc <_printf_i+0x1a8>
 800617c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006184:	e03a      	b.n	80061fc <_printf_i+0xa8>
 8006186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800618a:	2b15      	cmp	r3, #21
 800618c:	d8f6      	bhi.n	800617c <_printf_i+0x28>
 800618e:	a101      	add	r1, pc, #4	; (adr r1, 8006194 <_printf_i+0x40>)
 8006190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006194:	080061ed 	.word	0x080061ed
 8006198:	08006201 	.word	0x08006201
 800619c:	0800617d 	.word	0x0800617d
 80061a0:	0800617d 	.word	0x0800617d
 80061a4:	0800617d 	.word	0x0800617d
 80061a8:	0800617d 	.word	0x0800617d
 80061ac:	08006201 	.word	0x08006201
 80061b0:	0800617d 	.word	0x0800617d
 80061b4:	0800617d 	.word	0x0800617d
 80061b8:	0800617d 	.word	0x0800617d
 80061bc:	0800617d 	.word	0x0800617d
 80061c0:	08006305 	.word	0x08006305
 80061c4:	0800622d 	.word	0x0800622d
 80061c8:	080062bf 	.word	0x080062bf
 80061cc:	0800617d 	.word	0x0800617d
 80061d0:	0800617d 	.word	0x0800617d
 80061d4:	08006327 	.word	0x08006327
 80061d8:	0800617d 	.word	0x0800617d
 80061dc:	0800622d 	.word	0x0800622d
 80061e0:	0800617d 	.word	0x0800617d
 80061e4:	0800617d 	.word	0x0800617d
 80061e8:	080062c7 	.word	0x080062c7
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	1d1a      	adds	r2, r3, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	602a      	str	r2, [r5, #0]
 80061f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061fc:	2301      	movs	r3, #1
 80061fe:	e09f      	b.n	8006340 <_printf_i+0x1ec>
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	682b      	ldr	r3, [r5, #0]
 8006204:	0607      	lsls	r7, r0, #24
 8006206:	f103 0104 	add.w	r1, r3, #4
 800620a:	6029      	str	r1, [r5, #0]
 800620c:	d501      	bpl.n	8006212 <_printf_i+0xbe>
 800620e:	681e      	ldr	r6, [r3, #0]
 8006210:	e003      	b.n	800621a <_printf_i+0xc6>
 8006212:	0646      	lsls	r6, r0, #25
 8006214:	d5fb      	bpl.n	800620e <_printf_i+0xba>
 8006216:	f9b3 6000 	ldrsh.w	r6, [r3]
 800621a:	2e00      	cmp	r6, #0
 800621c:	da03      	bge.n	8006226 <_printf_i+0xd2>
 800621e:	232d      	movs	r3, #45	; 0x2d
 8006220:	4276      	negs	r6, r6
 8006222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006226:	485a      	ldr	r0, [pc, #360]	; (8006390 <_printf_i+0x23c>)
 8006228:	230a      	movs	r3, #10
 800622a:	e012      	b.n	8006252 <_printf_i+0xfe>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	6820      	ldr	r0, [r4, #0]
 8006230:	1d19      	adds	r1, r3, #4
 8006232:	6029      	str	r1, [r5, #0]
 8006234:	0605      	lsls	r5, r0, #24
 8006236:	d501      	bpl.n	800623c <_printf_i+0xe8>
 8006238:	681e      	ldr	r6, [r3, #0]
 800623a:	e002      	b.n	8006242 <_printf_i+0xee>
 800623c:	0641      	lsls	r1, r0, #25
 800623e:	d5fb      	bpl.n	8006238 <_printf_i+0xe4>
 8006240:	881e      	ldrh	r6, [r3, #0]
 8006242:	4853      	ldr	r0, [pc, #332]	; (8006390 <_printf_i+0x23c>)
 8006244:	2f6f      	cmp	r7, #111	; 0x6f
 8006246:	bf0c      	ite	eq
 8006248:	2308      	moveq	r3, #8
 800624a:	230a      	movne	r3, #10
 800624c:	2100      	movs	r1, #0
 800624e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006252:	6865      	ldr	r5, [r4, #4]
 8006254:	60a5      	str	r5, [r4, #8]
 8006256:	2d00      	cmp	r5, #0
 8006258:	bfa2      	ittt	ge
 800625a:	6821      	ldrge	r1, [r4, #0]
 800625c:	f021 0104 	bicge.w	r1, r1, #4
 8006260:	6021      	strge	r1, [r4, #0]
 8006262:	b90e      	cbnz	r6, 8006268 <_printf_i+0x114>
 8006264:	2d00      	cmp	r5, #0
 8006266:	d04b      	beq.n	8006300 <_printf_i+0x1ac>
 8006268:	4615      	mov	r5, r2
 800626a:	fbb6 f1f3 	udiv	r1, r6, r3
 800626e:	fb03 6711 	mls	r7, r3, r1, r6
 8006272:	5dc7      	ldrb	r7, [r0, r7]
 8006274:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006278:	4637      	mov	r7, r6
 800627a:	42bb      	cmp	r3, r7
 800627c:	460e      	mov	r6, r1
 800627e:	d9f4      	bls.n	800626a <_printf_i+0x116>
 8006280:	2b08      	cmp	r3, #8
 8006282:	d10b      	bne.n	800629c <_printf_i+0x148>
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	07de      	lsls	r6, r3, #31
 8006288:	d508      	bpl.n	800629c <_printf_i+0x148>
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	6861      	ldr	r1, [r4, #4]
 800628e:	4299      	cmp	r1, r3
 8006290:	bfde      	ittt	le
 8006292:	2330      	movle	r3, #48	; 0x30
 8006294:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006298:	f105 35ff 	addle.w	r5, r5, #4294967295
 800629c:	1b52      	subs	r2, r2, r5
 800629e:	6122      	str	r2, [r4, #16]
 80062a0:	f8cd a000 	str.w	sl, [sp]
 80062a4:	464b      	mov	r3, r9
 80062a6:	aa03      	add	r2, sp, #12
 80062a8:	4621      	mov	r1, r4
 80062aa:	4640      	mov	r0, r8
 80062ac:	f7ff fee4 	bl	8006078 <_printf_common>
 80062b0:	3001      	adds	r0, #1
 80062b2:	d14a      	bne.n	800634a <_printf_i+0x1f6>
 80062b4:	f04f 30ff 	mov.w	r0, #4294967295
 80062b8:	b004      	add	sp, #16
 80062ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	f043 0320 	orr.w	r3, r3, #32
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	4833      	ldr	r0, [pc, #204]	; (8006394 <_printf_i+0x240>)
 80062c8:	2778      	movs	r7, #120	; 0x78
 80062ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	6829      	ldr	r1, [r5, #0]
 80062d2:	061f      	lsls	r7, r3, #24
 80062d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80062d8:	d402      	bmi.n	80062e0 <_printf_i+0x18c>
 80062da:	065f      	lsls	r7, r3, #25
 80062dc:	bf48      	it	mi
 80062de:	b2b6      	uxthmi	r6, r6
 80062e0:	07df      	lsls	r7, r3, #31
 80062e2:	bf48      	it	mi
 80062e4:	f043 0320 	orrmi.w	r3, r3, #32
 80062e8:	6029      	str	r1, [r5, #0]
 80062ea:	bf48      	it	mi
 80062ec:	6023      	strmi	r3, [r4, #0]
 80062ee:	b91e      	cbnz	r6, 80062f8 <_printf_i+0x1a4>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	f023 0320 	bic.w	r3, r3, #32
 80062f6:	6023      	str	r3, [r4, #0]
 80062f8:	2310      	movs	r3, #16
 80062fa:	e7a7      	b.n	800624c <_printf_i+0xf8>
 80062fc:	4824      	ldr	r0, [pc, #144]	; (8006390 <_printf_i+0x23c>)
 80062fe:	e7e4      	b.n	80062ca <_printf_i+0x176>
 8006300:	4615      	mov	r5, r2
 8006302:	e7bd      	b.n	8006280 <_printf_i+0x12c>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	6826      	ldr	r6, [r4, #0]
 8006308:	6961      	ldr	r1, [r4, #20]
 800630a:	1d18      	adds	r0, r3, #4
 800630c:	6028      	str	r0, [r5, #0]
 800630e:	0635      	lsls	r5, r6, #24
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	d501      	bpl.n	8006318 <_printf_i+0x1c4>
 8006314:	6019      	str	r1, [r3, #0]
 8006316:	e002      	b.n	800631e <_printf_i+0x1ca>
 8006318:	0670      	lsls	r0, r6, #25
 800631a:	d5fb      	bpl.n	8006314 <_printf_i+0x1c0>
 800631c:	8019      	strh	r1, [r3, #0]
 800631e:	2300      	movs	r3, #0
 8006320:	6123      	str	r3, [r4, #16]
 8006322:	4615      	mov	r5, r2
 8006324:	e7bc      	b.n	80062a0 <_printf_i+0x14c>
 8006326:	682b      	ldr	r3, [r5, #0]
 8006328:	1d1a      	adds	r2, r3, #4
 800632a:	602a      	str	r2, [r5, #0]
 800632c:	681d      	ldr	r5, [r3, #0]
 800632e:	6862      	ldr	r2, [r4, #4]
 8006330:	2100      	movs	r1, #0
 8006332:	4628      	mov	r0, r5
 8006334:	f7f9 ff54 	bl	80001e0 <memchr>
 8006338:	b108      	cbz	r0, 800633e <_printf_i+0x1ea>
 800633a:	1b40      	subs	r0, r0, r5
 800633c:	6060      	str	r0, [r4, #4]
 800633e:	6863      	ldr	r3, [r4, #4]
 8006340:	6123      	str	r3, [r4, #16]
 8006342:	2300      	movs	r3, #0
 8006344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006348:	e7aa      	b.n	80062a0 <_printf_i+0x14c>
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	462a      	mov	r2, r5
 800634e:	4649      	mov	r1, r9
 8006350:	4640      	mov	r0, r8
 8006352:	47d0      	blx	sl
 8006354:	3001      	adds	r0, #1
 8006356:	d0ad      	beq.n	80062b4 <_printf_i+0x160>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	079b      	lsls	r3, r3, #30
 800635c:	d413      	bmi.n	8006386 <_printf_i+0x232>
 800635e:	68e0      	ldr	r0, [r4, #12]
 8006360:	9b03      	ldr	r3, [sp, #12]
 8006362:	4298      	cmp	r0, r3
 8006364:	bfb8      	it	lt
 8006366:	4618      	movlt	r0, r3
 8006368:	e7a6      	b.n	80062b8 <_printf_i+0x164>
 800636a:	2301      	movs	r3, #1
 800636c:	4632      	mov	r2, r6
 800636e:	4649      	mov	r1, r9
 8006370:	4640      	mov	r0, r8
 8006372:	47d0      	blx	sl
 8006374:	3001      	adds	r0, #1
 8006376:	d09d      	beq.n	80062b4 <_printf_i+0x160>
 8006378:	3501      	adds	r5, #1
 800637a:	68e3      	ldr	r3, [r4, #12]
 800637c:	9903      	ldr	r1, [sp, #12]
 800637e:	1a5b      	subs	r3, r3, r1
 8006380:	42ab      	cmp	r3, r5
 8006382:	dcf2      	bgt.n	800636a <_printf_i+0x216>
 8006384:	e7eb      	b.n	800635e <_printf_i+0x20a>
 8006386:	2500      	movs	r5, #0
 8006388:	f104 0619 	add.w	r6, r4, #25
 800638c:	e7f5      	b.n	800637a <_printf_i+0x226>
 800638e:	bf00      	nop
 8006390:	08006551 	.word	0x08006551
 8006394:	08006562 	.word	0x08006562

08006398 <memmove>:
 8006398:	4288      	cmp	r0, r1
 800639a:	b510      	push	{r4, lr}
 800639c:	eb01 0402 	add.w	r4, r1, r2
 80063a0:	d902      	bls.n	80063a8 <memmove+0x10>
 80063a2:	4284      	cmp	r4, r0
 80063a4:	4623      	mov	r3, r4
 80063a6:	d807      	bhi.n	80063b8 <memmove+0x20>
 80063a8:	1e43      	subs	r3, r0, #1
 80063aa:	42a1      	cmp	r1, r4
 80063ac:	d008      	beq.n	80063c0 <memmove+0x28>
 80063ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063b6:	e7f8      	b.n	80063aa <memmove+0x12>
 80063b8:	4402      	add	r2, r0
 80063ba:	4601      	mov	r1, r0
 80063bc:	428a      	cmp	r2, r1
 80063be:	d100      	bne.n	80063c2 <memmove+0x2a>
 80063c0:	bd10      	pop	{r4, pc}
 80063c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063ca:	e7f7      	b.n	80063bc <memmove+0x24>

080063cc <_sbrk_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4d06      	ldr	r5, [pc, #24]	; (80063e8 <_sbrk_r+0x1c>)
 80063d0:	2300      	movs	r3, #0
 80063d2:	4604      	mov	r4, r0
 80063d4:	4608      	mov	r0, r1
 80063d6:	602b      	str	r3, [r5, #0]
 80063d8:	f7fa fce0 	bl	8000d9c <_sbrk>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d102      	bne.n	80063e6 <_sbrk_r+0x1a>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	b103      	cbz	r3, 80063e6 <_sbrk_r+0x1a>
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	20013000 	.word	0x20013000

080063ec <_realloc_r>:
 80063ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f0:	4680      	mov	r8, r0
 80063f2:	4614      	mov	r4, r2
 80063f4:	460e      	mov	r6, r1
 80063f6:	b921      	cbnz	r1, 8006402 <_realloc_r+0x16>
 80063f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063fc:	4611      	mov	r1, r2
 80063fe:	f7ff bc57 	b.w	8005cb0 <_malloc_r>
 8006402:	b92a      	cbnz	r2, 8006410 <_realloc_r+0x24>
 8006404:	f7ff fbe8 	bl	8005bd8 <_free_r>
 8006408:	4625      	mov	r5, r4
 800640a:	4628      	mov	r0, r5
 800640c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006410:	f000 f81b 	bl	800644a <_malloc_usable_size_r>
 8006414:	4284      	cmp	r4, r0
 8006416:	4607      	mov	r7, r0
 8006418:	d802      	bhi.n	8006420 <_realloc_r+0x34>
 800641a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800641e:	d812      	bhi.n	8006446 <_realloc_r+0x5a>
 8006420:	4621      	mov	r1, r4
 8006422:	4640      	mov	r0, r8
 8006424:	f7ff fc44 	bl	8005cb0 <_malloc_r>
 8006428:	4605      	mov	r5, r0
 800642a:	2800      	cmp	r0, #0
 800642c:	d0ed      	beq.n	800640a <_realloc_r+0x1e>
 800642e:	42bc      	cmp	r4, r7
 8006430:	4622      	mov	r2, r4
 8006432:	4631      	mov	r1, r6
 8006434:	bf28      	it	cs
 8006436:	463a      	movcs	r2, r7
 8006438:	f7ff fbc0 	bl	8005bbc <memcpy>
 800643c:	4631      	mov	r1, r6
 800643e:	4640      	mov	r0, r8
 8006440:	f7ff fbca 	bl	8005bd8 <_free_r>
 8006444:	e7e1      	b.n	800640a <_realloc_r+0x1e>
 8006446:	4635      	mov	r5, r6
 8006448:	e7df      	b.n	800640a <_realloc_r+0x1e>

0800644a <_malloc_usable_size_r>:
 800644a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800644e:	1f18      	subs	r0, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	bfbc      	itt	lt
 8006454:	580b      	ldrlt	r3, [r1, r0]
 8006456:	18c0      	addlt	r0, r0, r3
 8006458:	4770      	bx	lr
	...

0800645c <_init>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr

08006468 <_fini>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	bf00      	nop
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr
